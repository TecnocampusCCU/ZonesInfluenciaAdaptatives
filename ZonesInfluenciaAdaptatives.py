# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ZonesInfluenciaAdaptatives
                                 A QGIS plugin
 ZonesInfluenciaAdaptatives
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-11-14
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Josep Lopez
        email                : jlopez@tecnocampus.cat
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from os.path import expanduser
from PyQt5 import QtCore
from PyQt5.QtCore import *

from PyQt5.QtGui import *
from PyQt5.QtWidgets import QAction,QMessageBox,QTableWidgetItem,QApplication,QSizePolicy,QGridLayout,QDialogButtonBox,QFileDialog,QDockWidget,QProgressBar,QInputDialog,QLineEdit,QColorDialog
from qgis.core import QgsMapLayer
from qgis.core import QgsDataSourceUri
from qgis.core import QgsVectorLayer
from qgis.core import QgsVectorFileWriter
from qgis.core import QgsGraduatedSymbolRenderer
from qgis.core import QgsCategorizedSymbolRenderer
from qgis.core import QgsGradientColorRamp
from qgis.core import QgsProject
from qgis.core import QgsRendererRange
from qgis.core import QgsSymbol
from qgis.core import QgsFillSymbol
from qgis.core import QgsLineSymbol
from qgis.core import QgsSymbolLayerRegistry
from qgis.core import QgsRandomColorRamp
from qgis.core import QgsRendererRangeLabelFormat
from qgis.core import QgsProject
from qgis.core import QgsLayerTreeLayer
from qgis.core import QgsRenderContext
from qgis.core import QgsPalLayerSettings
from qgis.core import QgsTextFormat
from qgis.core import QgsTextBufferSettings
from qgis.core import QgsVectorLayerSimpleLabeling
from qgis.core import QgsProcessingFeedback, Qgis
from qgis.core import QgsVectorLayerExporter
from qgis.core import QgsWkbTypes
from qgis.core import QgsUnitTypes
from qgis.core import QgsFeature
from qgis.core import QgsFeatureSink
from qgis.core import QgsFeatureRequest
from qgis.core import QgsGeometry
from qgis.core import QgsGeometryUtils
from qgis.core import QgsFields
from qgis.core import QgsPointXY
from qgis.core import QgsField
from qgis.core import QgsProcessing
from qgis.core import QgsProcessingParameters
from qgis.core import QgsProcessingException
from qgis.core import QgsProcessingParameterBoolean
from qgis.core import QgsProcessingParameterDistance
from qgis.core import QgsProcessingParameterEnum
from qgis.core import QgsProcessingParameterPoint
from qgis.core import QgsProcessingParameterField
from qgis.core import QgsProcessingParameterNumber
from qgis.core import QgsProcessingParameterString
from qgis.core import QgsProcessingParameterFeatureSource
from qgis.core import QgsProcessingParameterFeatureSink
from qgis.core import QgsProcessingParameterDefinition
from qgis.core import QgsProcessingAlgorithm
from collections import OrderedDict
from qgis.PyQt.QtCore import QVariant, QCoreApplication
from qgis.analysis import QgsVectorLayerDirector
from qgis.analysis import QgsNetworkDistanceStrategy
from qgis.analysis import QgsNetworkSpeedStrategy
from qgis.analysis import QgsGraphBuilder
from qgis.analysis import QgsGraphAnalyzer
from processing.algs.qgis.QgisAlgorithm import QgisAlgorithm
from qgis.gui import QgsMessageBar
import psycopg2
import unicodedata
import datetime
import time
import processing
from processing.tools import dataobjects
from qgis.utils import iface
from PyQt5.QtSql import *


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .ZonesInfluenciaAdaptatives_dialog import ZonesInfluenciaAdaptativesDialog
import os.path
from math import sqrt
from macpath import curdir

"""
PART DE STREET VIEW
"""
from qgis.core import QgsWkbTypes,QgsCoordinateReferenceSystem,QgsCoordinateTransform
from qgis.gui import QgsMessageBar,QgsRubberBand,QgsMapTool
import math
import webbrowser  
rb=QgsRubberBand(iface.mapCanvas(),QgsWkbTypes.PointGeometry )
rl=QgsRubberBand(iface.mapCanvas(),QgsWkbTypes.LineGeometry )
premuto= False
linea=False
stdCursor = None  
point0=iface.mapCanvas().getCoordinateTransform().toMapCoordinates(0, 0)
point1=iface.mapCanvas().getCoordinateTransform().toMapCoordinates(0, 0)
"""
PART DE STREET VIEW
"""

"""
Variables globals per a la connexio
i per guardar el color dels botons
"""
Versio_modul="V_Q3.191112"
micolorArea = None
micolor = None
nomBD1=""
contra1=""
host1=""
port1=""
usuari1=""
schema=""
entitat_poi=""
Fitxer=""
Path_Inicial=expanduser("~")
cur=None
conn=None
progress=None
pas_barra_iteracions=1
icon_path=""
clicked_esborra=0
        
class ZonesInfluenciaAdaptatives:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ZonesInfluenciaAdaptatives_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)
        '''
        Connexio dels botons amb les funcions que han de realitzar
        '''
        self.dlg = ZonesInfluenciaAdaptativesDialog()
        self.dlg.bt_StreetView.clicked.connect(self.on_click_StreeView)
        self.dlg.bt_sortir.clicked.connect(self.on_click_Sortir)
        self.dlg.colorArea.clicked.connect(self.on_click_ColorArea)
        self.dlg.comboConnexio.currentIndexChanged.connect(self.on_Change_ComboConn)
        self.dlg.comboGraf.currentIndexChanged.connect(self.on_Change_ComboGraf)
        self.dlg.combo_punts.currentIndexChanged.connect(self.on_Change_ComboPunts)
        self.dlg.bt_inici.clicked.connect(self.on_click_Inici)
        self.dlg.bt_ILLES.toggled.connect(self.on_click_MarcarIlles)
        self.dlg.bt_Parcel.toggled.connect(self.on_click_MarcarParcel)
        self.dlg.bt_Portals.toggled.connect(self.on_click_MarcarPortals)
        self.dlg.color.clicked.connect(self.on_click_Color)
        self.dlg.CB_tramsUtils.stateChanged.connect(self.on_click_CB_tramsUtils)
        self.dlg.Esborra_temp.clicked.connect(self.on_click_Esborra_temporals)
        # Create the dialog (after translation) and keep reference

        self.actions = []
        self.menu = self.tr(u'&CCU')
        self.toolbar = self.iface.addToolBar(u'CCU')
        self.toolbar.setObjectName(u'ZonesInfluenciaAdaptatives')
        self.bar = QgsMessageBar()
        self.bar.setSizePolicy( QSizePolicy.Minimum, QSizePolicy.Fixed )
        self.dlg.setLayout(QGridLayout())
        self.dlg.layout().setContentsMargins(0, 0, 0, 0)
        self.dlg.buttonbox = QDialogButtonBox(QDialogButtonBox.Ok)
        self.dlg.buttonbox.accepted.connect(self.run)
        self.dlg.buttonbox.setVisible(False)
        self.dlg.layout().addWidget(self.dlg.buttonbox, 0, 0, 2, 1)
        self.dlg.layout().addWidget(self.bar, 0, 0,1,1)
        self.dlg.setWindowIcon(QIcon(icon_path))
        self.dlg.Esborra_temp.setVisible(False)


        
    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ZonesInfluenciaAdaptatives', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        global icon_path
        icon_path = ':/plugins/ZonesInfluenciaAdaptatives/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Zones Influencia Adaptatives'),
            callback=self.run,
            parent=self.iface.mainWindow())


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Zones Influencia Adaptatives'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar


    def on_click_ColorArea(self):
        """Aquesta funciÃ³ obra un dialeg per poder triar el color de l'area que volem pintar. """
        global micolorArea
        aux = QColorDialog.getColor()
        if aux.isValid():
            micolorArea = aux
        #estilo='border:1px solid #000000; background-color: '+ micolorArea.name().decode('utf8')
        estilo='border:1px solid #000000; background-color: '+ micolorArea.name()
        self.dlg.colorArea.setStyleSheet(estilo)
        self.dlg.colorArea.setAutoFillBackground(True)
        pep=self.dlg.colorArea.palette().color(1)
        pass
    
    def on_click_Color(self):
        """Aquesta funciÃ³ obra un dialeg per poder triar el color del contorn de l'area que volem pintar. """
        global micolor
        aux = QColorDialog.getColor()
        if aux.isValid():
            micolor = aux
        #estilo='border:1px solid #000000; background-color: '+ micolor.name().decode('utf8')
        estilo='border:1px solid #000000; background-color: '+ micolor.name()
        self.dlg.color.setStyleSheet(estilo)
        self.dlg.color.setAutoFillBackground(True)
        pep=self.dlg.color.palette().color(1)
        pass
     
    def on_click_Sortir(self):
        '''
        Tanca la finestra del plugin 
        '''
        self.EstatInicial()
        self.dlg.close()
        
    def on_click_CB_tramsUtils(self, state):
        if state != QtCore.Qt.Checked:
            self.dlg.CB_dibuixarGraf.setEnabled(False)
            self.dlg.lbl_radi.setEnabled(False)
            self.dlg.txt_radi.setEnabled(False)
            self.dlg.comboGraf.setEnabled(False)
            self.dlg.comboTras.setEnabled(False)
            self.dlg.lblTras.setEnabled(False)
            self.dlg.CB_dibuixarGraf.setChecked(False)
            self.dlg.chk_calc_local.setEnabled(False)
            self.dlg.chk_calc_local.setChecked(False)
        else:
            self.dlg.CB_dibuixarGraf.setEnabled(True)
            self.dlg.lbl_radi.setEnabled(True)
            self.dlg.txt_radi.setEnabled(True)
            self.dlg.comboGraf.setEnabled(True)
            self.dlg.lblTras.setEnabled(True)
            self.dlg.comboTras.setEnabled(True)
            self.dlg.chk_calc_local.setEnabled(True)
    
    def EstatInicial(self):
        """Aquesta funciÃ³ posa tots els elements de la interficie en el seu estat inicial."""
        global Versio_modul
        global micolor
        global micolorArea
        self.bar.clearWidgets()
        self.dlg.bt_ILLES.setChecked(True)
        self.dlg.bt_Parcel.setChecked(False)
        self.dlg.bt_Portals.setChecked(False)
        self.dlg.txt_iteracions.setText("1")
        self.dlg.txt_radiFix.setText('400')
        self.dlg.txt_percentatge.setText('100')
        self.dlg.txt_radi.setText('20')
        self.dlg.CB_tramsUtils.setChecked(False)
        self.dlg.CB_dibuixarGraf.setChecked(False)
        self.dlg.CB_mostrarPobNoAfectada.setChecked(False)
        self.dlg.combo_punts.clear()
        self.dlg.comboGraf.clear()
        self.dlg.versio.setText(Versio_modul)
        micolor = QColor(255,0,0,255)
        micolorArea = QColor(0,255,255,255)
        self.dlg.colorArea.setStyleSheet('border:1px solid #000000; background-color: #aaffff')
        self.barraEstat_noConnectat()
        self.dlg.lblNum.setText("")
        self.dlg.lblNum.setStyleSheet('border:1px solid #000000')
        self.dlg.lblHab.setStyleSheet('border:1px solid #000000; background-color: rgb(85, 170, 255)')
        self.dlg.colorArea.setStyleSheet('border:1px solid #000000; background-color: #aaffff')
        self.dlg.color.setStyleSheet('border:1px solid #000000; background-color: #ff0000')
        self.dlg.CB_dibuixarGraf.setEnabled(False)
        self.dlg.lbl_radi.setEnabled(False)
        self.dlg.txt_radi.setEnabled(False)
        self.dlg.comboGraf.setEnabled(False)
        self.dlg.lblTras.setEnabled(False)
        self.dlg.comboTras.setEnabled(False)
        self.dlg.chk_calc_local.setEnabled(False)
        self.dlg.Esborra_temp.setStyleSheet('border:0px solid #000000; background-color: transparent')
        
        QApplication.processEvents()
    
    def on_click_MarcarIlles(self, clicked):
        """Aquesta funciÃ³ controla l'aparenÃ§a del botÃ³ Illes """
        if clicked:
            self.dlg.bt_ILLES.setStyleSheet('background-color: #7fff7f')
            self.dlg.bt_Parcel.setChecked(False)
            self.dlg.bt_Portals.setChecked(False)
            self.dlg.color.setStyleSheet('border:1px solid #000000; background-color: #ff0000')
            micolor = QColor(255,0,0,255)
        else:
            self.dlg.bt_ILLES.setChecked(False)
            self.dlg.bt_ILLES.setStyleSheet('background-color: rgb(227, 227, 227)')
            
    def on_click_MarcarParcel(self, clicked):
        """Aquesta funciÃ³ controla l'aparenÃ§a del botÃ³ Parceles """
        if clicked:
            self.dlg.bt_Parcel.setStyleSheet('background-color: #7fff7f')
            self.dlg.bt_ILLES.setChecked(False)
            self.dlg.bt_Portals.setChecked(False)
            self.dlg.color.setStyleSheet('border:1px solid #000000; background-color: #0000ff')
            micolor = QColor(0,0,255,255)
        else:
            self.dlg.bt_Parcel.setChecked(False)
            self.dlg.bt_Parcel.setStyleSheet('background-color: rgb(227, 227, 227)')
            
    def on_click_MarcarPortals(self, clicked):
        """Aquesta funciÃ³ controla l'aparenÃ§a del botÃ³ Portals """
        if clicked:
            self.dlg.bt_Portals.setStyleSheet('background-color: #7fff7f')
            self.dlg.bt_Parcel.setChecked(False)
            self.dlg.bt_ILLES.setChecked(False)
            self.dlg.color.setStyleSheet('border:1px solid #000000; background-color: #00ff00')
            micolor = QColor(0,255,0,255)
        else:
            self.dlg.bt_Portals.setChecked(False)
            self.dlg.bt_Portals.setStyleSheet('background-color: rgb(227, 227, 227)')    
    
    
    def on_Change_ComboConn(self):
        """
        En el moment en que es modifica la opcio escollida 
        del combo o desplegable de les connexions,
        automÃ ticament comprova si es pot establir
        connexiÃ³ amb la bbdd seleccionada.
        """
        global nomBD1
        global contra1
        global host1
        global port1
        global usuari1
        global schema
        global cur
        global conn
        s = QSettings()
        self.dlg.combo_punts.clear()
        self.dlg.comboGraf.clear()
        select = 'Selecciona connexiÃ³'
        nom_conn=self.dlg.comboConnexio.currentText()
        if nom_conn != select:
            s.beginGroup("PostgreSQL/connections/"+nom_conn)
            currentKeys = s.childKeys()
            
            nomBD1 = s.value("database", "" )
            contra1 = s.value("password", "" )
            host1 = s.value("host", "" )
            port1 = s.value("port", "" )
            usuari1 = s.value("username", "" )
            schema= 'public'
            
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #ffff7f')
            self.dlg.lblEstatConn.setText('Connectant...')
            self.dlg.lblEstatConn.setAutoFillBackground(True)
            QApplication.processEvents()

            #Connexio
            nomBD = nomBD1.encode('ascii','ignore')
            usuari = usuari1.encode('ascii','ignore')
            servidor = host1.encode('ascii','ignore')     
            contrasenya = contra1.encode('ascii','ignore')
            try:
                estructura = "dbname='"+ nomBD.decode("utf-8") + "' user='" + usuari.decode("utf-8") +"' host='" + servidor.decode("utf-8") +"' password='" + contrasenya.decode("utf-8") + "'"# schema='"+schema+"'"
                conn = psycopg2.connect(estructura)
                self.barraEstat_connectat()
                cur = conn.cursor()
                sql = "select f_table_name from geometry_columns where type = 'POINT' and f_table_schema ='public' order by 1"
                cur.execute(sql)
                llista = cur.fetchall()
                self.ompleCombos(self.dlg.combo_punts, llista, 'Selecciona una entitat', True)
                sql2 = "select f_table_name from geometry_columns where ((type = 'MULTILINESTRING' or type = 'LINESTRING') and f_table_schema ='public') order by 1"
                cur.execute(sql2)
                llista2 = cur.fetchall()
                self.ompleCombos(self.dlg.comboGraf, llista2, 'Selecciona una entitat', True)
                self.dlg.Esborra_temp.setVisible(True)
            except:
                self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #ff7f7f')
                self.dlg.lblEstatConn.setText('Error: Hi ha algun camp erroni.')
                print ("I am unable to connect to the database")
                self.dlg.Esborra_temp.setVisible(False)

            #self.DropTemporalTables()
        else:
            self.barraEstat_noConnectat()
        
    def on_Change_ComboGraf(self, state):
        """
        En el moment en que es modifica la opcio escollida 
        del combo o desplegable de la capa de punts,
        automÃ ticament comprova els camps de la taula escollida.
        """
        capa=self.dlg.comboGraf.currentText()
        if capa != "":
            if capa != 'Selecciona una entitat':
                if (self.grafValid(capa)):
                    pass
                else:
                    QMessageBox.information(None, "Error", 'El graf seleccionat no té la capa de nusos corresponent.\nEscolliu un altre.')
    
    def on_Change_ComboPunts(self, state):
        """
        En el moment en que es modifica la opcio escollida 
        del combo o desplegable de la capa de punts,
        automÃ ticament comprova els camps de la taula escollida.
        """
        capa=self.dlg.combo_punts.currentText()
        if capa != "":
            if capa != 'Selecciona una entitat':
                if (self.puntsValid(capa)):
                    pass
                else:
                    QMessageBox.information(None, "Error", 'La capa de punts seleccionada no Ã©s vÃ lida ja que no tÃ© o li falta algun dels camps segÃ¼ents:\n-"NPlaces"\n-"RadiInicial"\n-"id"\n')
    
    
    def controlErrors(self):
        """Aquesta funciÃ³ controla que tots els camps siguin correctes abans de fer el cÃ lcul"""
        errors = []
        if self.dlg.comboConnexio.currentText() == 'Selecciona connexió':
            errors.append('No hi ha seleccionada cap connexió')
        if self.dlg.combo_punts.currentText() == 'Selecciona una entitat' or self.dlg.combo_punts.currentText() == '':
            errors.append('No hi ha seleccionada cap capa de punts seleccionada')
        if self.dlg.CB_tramsUtils.isChecked():
            if self.dlg.comboGraf.currentText() == 'Selecciona una entitat' or self.dlg.comboGraf.currentText() == '':
                errors.append('No hi ha seleccionada cap capa de xarxa seleccionada')
        
        try:
            numero = int(float(self.dlg.txt_iteracions.text()))
            if numero < 0:
                errors.append("El número d'iteracions no pot ser negatiu")
        except:
            errors.append("El número d'iteracions no és vàlid")
            
        try:
            numero2 = float(self.dlg.txt_radiFix.text())
            if numero2 < 0:
                errors.append('El número del radi fixe no pot ser negatiu')
        except:
            errors.append('El número del radi fixe no pot ser negatiu')
        try:
            numero3 = float(self.dlg.txt_percentatge.text())
            if numero3 < 0:
                errors.append("El percentatge de població afectada no pot ser negatiu")
            if numero3 > 100:
                errors.append("El percentatge de població afectada no pot ser més gran de 100")
        except:
            errors.append("El percentatge de poblacié afectada no és vàlid")
            
        try:
            numero4 = float(self.dlg.txt_radi.text())
            if numero4 < 0:
                errors.append('El número del radi de ZI no pot ser negatiu')
        except:
            errors.append('El número del radi de ZI no és vàlid')
                    
        return errors
    
    def puntsValid(self, taula):
        '''Aquesta funcio comprova si la taula de la capa de punts tÃ© els camps necessaris per fer els cÃ lculs'''
        global cur
        global conn
        campNPlaces = False
        sql = "select exists (select * from information_schema.columns where table_schema = 'public' and table_name = '"+taula +"' and column_name = 'NPlaces');"
        cur.execute(sql)
        campNPlaces = cur.fetchall()
        campRadiInicial = True
        sql = "select exists (select * from information_schema.columns where table_schema = 'public' and table_name = '"+taula +"' and column_name = 'RadiInicial');"
        cur.execute(sql)
        campRadiInicial = cur.fetchall()
        campID = True
        sql = "select exists (select * from information_schema.columns where table_schema = 'public' and table_name = '"+taula +"' and column_name = 'id');"
        cur.execute(sql)
        campID = cur.fetchall()
        return campNPlaces[0][0] and campRadiInicial[0][0] and campID[0][0]
    
    def grafValid(self, taula):
        """Aquesta funciÃ³ comprova si la taula que li hem passat tÃ© la seva capa de graf corresponent"""
        global cur
        global conn
        sql = "select exists (select 1 from geometry_columns where f_table_name = '" + taula + "_vertices_pgr')"
        cur.execute(sql)
        camp = cur.fetchall()
        return camp[0][0]
    
    def getConnections(self):
        """Aquesta funcio retorna les connexions que estan guardades en el projecte."""
        s = QSettings() 
        s.beginGroup("PostgreSQL/connections")
        currentConnections = s.childGroups()
        s.endGroup()
        return currentConnections
    
    def populateComboBox(self,combo,list,predef,sort):
        """Procediment per omplir el combo especificat amb la llista suministrada"""
        combo.blockSignals (True)
        combo.clear()
        model=QStandardItemModel(combo)
        predefInList = None
        for elem in list:
            try:
                item = QStandardItem(unicode(elem))
            except TypeError:
                item = QStandardItem(str(elem))
            model.appendRow(item)
            if elem == predef:
                predefInList = elem
        if sort:
            model.sort(0)
        combo.setModel(model)
        if predef != "":
            if predefInList:
                combo.setCurrentIndex(combo.findText(predefInList))
            else:
                combo.insertItem(0,predef)
                combo.setCurrentIndex(0)
        combo.blockSignals (False)
    
    def ompleCombos(self, combo, llista, predef, sort):
        """Aquesta funciÃ³ omple els combos que li passem per parÃ metres"""
        combo.blockSignals (True)
        combo.clear()
        model=QStandardItemModel(combo)
        predefInList = None
        for elem in llista:
            try:
                item = QStandardItem(unicode(elem[0]))
            except TypeError:
                item = QStandardItem(str(elem[0]))
            model.appendRow(item)
            if elem == predef:
                predefInList = elem
        combo.setModel(model)
        if predef != "":
            if predefInList:
                combo.setCurrentIndex(combo.findText(predefInList))
            else:
                combo.insertItem(0,predef)
                combo.setCurrentIndex(0)
        combo.blockSignals (False)
    
    def on_click_Recalcular(self):
        #print ("recalcula")
        global cur
        global conn
        entitat = self.dlg.combo_punts.currentText()
        radiFix = self.dlg.txt_radiFix.text()
        drop = "drop table if exists \"Entitat_Temp\";"
        cur.execute(drop)
        conn.commit()
        sql = "create local temp table \"Entitat_Temp\" as select \"id\",round(\"NPlaces\"/(select avg(\"NPlaces\") from \""+ entitat + "\")*"+radiFix+") as \"NR\" from \""+ entitat + "\" group by \"id\";"
        cur.execute(sql)
        conn.commit()
        drop = "drop table if exists \"EntitatPuntual_Temp_"+Fitxer+"\";\n"
        cur.execute(drop)
        conn.commit()
        sql="create table \"EntitatPuntual_Temp_"+Fitxer+"\"  as select \""+ entitat + "\".*,\"Entitat_Temp\".\"NR\" from \""+ entitat + "\" join \"Entitat_Temp\" on (\""+ entitat + "\".\"id\"=\"Entitat_Temp\".\"id\");\n"
        sql+="alter table \"EntitatPuntual_Temp_"+Fitxer+"\" drop column \"RadiInicial\";\n"
        sql+="alter table \"EntitatPuntual_Temp_"+Fitxer+"\" rename column \"NR\" TO \"RadiInicial\";"
        #sql = "create local temp table \"EntitatPuntual_Temp\" as select \"id\",round(\"NPlaces\"/(select avg(\"NPlaces\") from \""+ entitat + "\")*"+radiFix+") as \"NR\" from \""+ entitat + "\" group by \"id\";"
        cur.execute(sql)
        #print sql
        conn.commit()
        
    def campGeometria(self, taula):
        """Aquesta funciÃ³ retorna el camp de geometria de la taula que li passem per parametres"""

        global cur
        global conn

        sql = "select f_geometry_column from geometry_columns where f_table_name = '" + taula + "'"
        
        cur.execute(sql)
        camp = cur.fetchall()
        return camp[0][0]
    
    def calcul_graf(self,sql_buff,camp_radi):
        """Aquesta es una funcio auxiliar que retorna un sql amb el buffer"""
        global cur
        global conn
        global micolor_Topo
        global micolor_ZI
        global micolor_Graf
        global Fitxer
        global progress
        global geometria
#       *****************************************************************************************************************
#       INICI CREACIO DE LA TAULA 'XARXA_GRAF' I PREPARACIO DELS CAMPS COST I REVERSE_COST
#       *****************************************************************************************************************
        XarxaCarrers = self.dlg.comboGraf.currentText()
        sql_1="DROP TABLE IF EXISTS \"Xarxa_Graf\";\n"
        """ Es fa una copia de la taula que conté el graf i s'afegeixen els camps cost i reverse_cost en funció del que es necessiti, es crearà  taula local temporal per evitar problemes de concurrencia"""
        sql_1+="CREATE local temp TABLE \"Xarxa_Graf\" AS (SELECT * FROM \"" + XarxaCarrers + "\");\n"
        """S'aplica com a cost tant directe com invers el valor de la longitud del segment"""
        sql_1+="UPDATE \"Xarxa_Graf\" set \"cost\"=st_length(\"the_geom\"), \"reverse_cost\"=st_length(\"the_geom\");\n"
        print (sql_1)
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            missatge="Error en crear duplicat de la xarxa "+XarxaCarrers
            print (missatge)
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", missatge)
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            return "ERROR"
#       *****************************************************************************************************************
#       FI CREACIO DE LA TAULA 'XARXA_GRAF' I PREPARACIO DELS CAMPS COST I REVERSE_COST
#       *****************************************************************************************************************

#       *****************************************************************************************************************
#       INICI CREACIO DE LA TAULA 'PUNTS_INTERES_TMP' QUE CONTINDRA ELS PUNTS D'INTERES PROJECTATS SOBRE EL TRAM
#       *****************************************************************************************************************
        geometria=self.campGeometria(self.dlg.combo_punts.currentText())
        sql_1="drop table if exists punts_interes_tmp;\n"
        
        """Es crea la taula 'punts_interes_tmp' seleccionant el centroide de la entitat seleccionada utilitzant com a radi el valor del camp seleccionat"""
        sql_1+="CREATE local temporary TABLE punts_interes_tmp as (SELECT ST_Centroid(tmp.\""+geometria+"\") the_geom,tmp.\"id\"as pid,tmp.\""+camp_radi+"\" from ("+sql_buff+") tmp);\n"
        
            
        #sql_1+="ALTER TABLE punts_interes_tmp ADD COLUMN pid BIGSERIAL PRIMARY KEY;\n"
        sql_1+="ALTER TABLE punts_interes_tmp ADD COLUMN     x FLOAT;\n"
        sql_1+="ALTER TABLE punts_interes_tmp ADD COLUMN     y FLOAT;\n"
        sql_1+="ALTER TABLE punts_interes_tmp ADD COLUMN     edge_id BIGINT;\n"
        sql_1+="ALTER TABLE punts_interes_tmp ADD COLUMN     side CHAR;\n"
        sql_1+="ALTER TABLE punts_interes_tmp ADD COLUMN     fraction FLOAT;\n"
        sql_1+="ALTER TABLE punts_interes_tmp ADD COLUMN     newPoint geometry;\n"
        #print sql_1
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            missatge="Error en crear taula temporal punts_interes_tmp"
            print (missatge)
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", missatge)
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            return "ERROR"
#       *****************************************************************************************************************
#       FI CREACIO DE LA TAULA 'PUNTS_INTERES_TMP' QUE CONTINDRA ELS PUNTS D'INTERES PROJECTATS SOBRE EL TRAM
#       *****************************************************************************************************************

#       *****************************************************************************************************************
#       INICI ASSIGNACIO DEL VALOR DEL TRAM MES PROPER AL CAMP 'EDGE_ID' DE LA TAULA 'PUNTS_INTERES_TMP I LA PROJECCIO DEL PUNT D'INTERES SOBRE EL TRAM
#       *****************************************************************************************************************
        """S'assigna el valor del tram mÃ©s proper al punt d'interes en el camp 'edge_id' de la taula 'punts_interes_tmp'"""
        sql_1="UPDATE \"punts_interes_tmp\" set \"edge_id\"=tram_proper.\"tram_id\" from (SELECT distinct on(Poi.pid) Poi.pid As Punt_id,Sg.id as Tram_id, ST_Distance(Sg.the_geom,Poi.the_geom)  as dist FROM \"Xarxa_Graf\" as Sg,\"punts_interes_tmp\" AS Poi ORDER BY  Poi.pid,ST_Distance(Sg.the_geom,Poi.the_geom),Sg.id) tram_proper where \"punts_interes_tmp\".\"pid\"=tram_proper.\"punt_id\";\n"
        """Es calcula la fraccio del tram que on esta situat la projecciÃ³ del punt d'interes"""
        sql_1+="UPDATE \"punts_interes_tmp\" SET fraction = ST_LineLocatePoint(e.the_geom, \"punts_interes_tmp\".the_geom),newPoint = ST_LineInterpolatePoint(e.the_geom, ST_LineLocatePoint(e.the_geom, \"punts_interes_tmp\".the_geom)) FROM \"Xarxa_Graf\" AS e WHERE \"punts_interes_tmp\".\"edge_id\" = e.id;\n"
        #print sql_1
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            missatge="Error en actualitzar taula temporal punts_interes_tmp"
            print (missatge)
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", missatge)
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            return "ERROR"
#       *****************************************************************************************************************
#       FI ASSIGNACIO DEL VALOR DEL TRAM MES PROPER AL CAMP 'EDGE_ID' DE LA TAULA 'PUNTS_INTERES_TMP 
#       *****************************************************************************************************************

#       *****************************************************************************************************************
#       INICI DE LA CREACIO DE LA TAULA 'TBL_PUNTS_FINALS_TMP' QUE CONTINDRA ELS ID DELS NODES DE LA XARXA QUE SON A DINS DEL RADI 
#       *****************************************************************************************************************
        sql_1="DROP FUNCTION IF EXISTS Cobertura();\n"
        sql_1+="DROP TABLE IF EXISTS tbl_punts_finals_tmp;\n"
        
        """ Es posa a dins d'una variable 'Radi_Variable' tots els valors de radis de cada punt d'interes"""
        try:
            cur.execute("select \"pid\",\""+camp_radi+"\" from \"punts_interes_tmp\" order by \"pid\" asc ;\n")
        except Exception as ex:
            missatge="Error llegir valor del camp "+camp_radi
            print (missatge)
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", missatge)
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            return "ERROR"
        
        Radi_Variable = cur.fetchall()
        """CreaciÃ³ de la taula 'tbl_punts_finsl_tmp' on es tindrÃ  tots els nodes de la xarxa que son a dins del radi d'acciÃ³ indicat fent UNION per cada entitat amb el seu radi personalitzat segons el valor del camp escollit"""
        sql_1+="CREATE local temporary TABLE tbl_punts_finals_tmp AS("
        for x in range (0,len(Radi_Variable)):
            if (x!=0):
                sql_1+=" UNION "
            sql_1+="SELECT node,agg_cost,start_vid,"+str(Radi_Variable[x][1])+" as init_radi FROM pgr_withPointsDD('SELECT id, source, target, cost, reverse_cost FROM \"Xarxa_Graf\" ORDER BY id','SELECT pid, edge_id, fraction, side from \"punts_interes_tmp\"',array[-"+str(Radi_Variable[x][0])+"],"+str(Radi_Variable[x][1])+",driving_side := 'b',details := false)"
        sql_1+=");\n"
            
        
        #print sql_1
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            missatge="Error al crear la taula temporal tbl_punts_finals_tmp"
            print (missatge)
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", missatge)
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            return "ERROR"
#       *****************************************************************************************************************
#       FI DE LA CREACIO DE LA TAULA 'TBL_PUNTS_FINALS_TMP' QUE CONTINDRA ELS ID DELS NODES DE LA XARXA QUE SON A DINS DEL RADI 
#       *****************************************************************************************************************
#       *****************************************************************************************************************
#       INICI DE LA CREACIO DE LA TAULA 'GEO_PUNTS_FINALS_TMP' QUE CONTINDRA ELS NODES DE LA XARXA QUE SON A DINS DEL RADI 
#       *****************************************************************************************************************
        sql_1="DROP table if exists geo_punts_finals_tmp;\n"

        """CreaciÃ³ de la taula 'geo_punts_finals_tmp' on estan tots els nodes de la xarxa que son a dins del radi variable segons el camp escolit amb la geometria inclosa"""
        sql_1+="CREATE local temporary TABLE geo_punts_finals_tmp as (select \"" + XarxaCarrers + "_vertices_pgr\".*,\"tbl_punts_finals_tmp\".\"agg_cost\", \"tbl_punts_finals_tmp\".\"start_vid\", \"tbl_punts_finals_tmp\".\"init_radi\" from \"" + XarxaCarrers + "_vertices_pgr\",\"tbl_punts_finals_tmp\" where \"" + XarxaCarrers + "_vertices_pgr\".\"id\" =\"tbl_punts_finals_tmp\".\"node\" order by \"tbl_punts_finals_tmp\".\"start_vid\" desc,\"tbl_punts_finals_tmp\".\"agg_cost\");\n"
       
        #print sql_1
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            missatge="Error al crear la taula temporal geo_punts_finals_tmp"
            print (missatge)
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", missatge)
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            return "ERROR"
                    #Controlar si la zona obtenida es demasiado pequeña
        try:
            cur.execute('SELECT COUNT(*) FROM geo_punts_finals_tmp' )
            aux = cur.fetchall()
            if(aux[0][0]==0):
                raise Exception("El nombre d'habitants proper a les entitats escollides, es massa elevat. Pot ser degut a la poca capacitat de les entitats o a haber escollit un target de població massa elevat pel tipus de entitat.")
        except:
            missatge="El nombre d'habitants proper a les entitats escollides, es massa elevat. Pot ser degut a la poca capacitat de les entitats o a haber escollit un target de població massa elevat pel tipus de entitat."
            print(missatge)
            QMessageBox.information(None, "Error", missatge)
            return -1

#       *****************************************************************************************************************
#       FI DE LA CREACIO DE LA TAULA 'GEO_PUNTS_FINALS_TMP' QUE CONTINDRA ELS NODES DE LA XARXA QUE SON A DINS DEL RADI 
#       *****************************************************************************************************************
            
        
#       *****************************************************************************************************************
#       INICI DE LA CREACIO DE LA TAULA 'TRAMS_FINALS_TMP' QUE CONTINDRA ELS TRAMS QUE FORMEN PART DEL RADI D'ACCIO INDICAT 
#       *****************************************************************************************************************
        sql_1="DROP table IF EXISTS trams_finals_tmp;\n"
        sql_1+="CREATE local temporary TABLE trams_finals_tmp as (select \"Xarxa_Graf\".\"id\",\"Xarxa_Graf\".\"the_geom\",\"geo_punts_finals_tmp\".\"id\" as node,\"geo_punts_finals_tmp\".\"agg_cost\" as coste,(\"geo_punts_finals_tmp\".\"init_radi\"-\"geo_punts_finals_tmp\".\"agg_cost\") as falta,\"geo_punts_finals_tmp\".\"start_vid\" as id_punt, (select case when (\"geo_punts_finals_tmp\".\"init_radi\"-\"geo_punts_finals_tmp\".\"agg_cost\")/ST_Length(\"Xarxa_Graf\".\"the_geom\")<=1 then (\"geo_punts_finals_tmp\".\"init_radi\"-\"geo_punts_finals_tmp\".\"agg_cost\")/ST_Length(\"Xarxa_Graf\".\"the_geom\") when (\"geo_punts_finals_tmp\".\"init_radi\"-\"geo_punts_finals_tmp\".\"agg_cost\")/ST_Length(\"Xarxa_Graf\".\"the_geom\")>1 then (1) end) as fraccio from \"Xarxa_Graf\",\"geo_punts_finals_tmp\" where ST_DWithin(\"geo_punts_finals_tmp\".\"the_geom\",\"Xarxa_Graf\".\"the_geom\",1)=TRUE);\n"
        #print sql_1
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            missatge="Error al crear la taula temporal trams_finals_tmp"
            print (missatge)
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", missatge)
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            return "ERROR"
#       *****************************************************************************************************************
#       FI DE LA CREACIO DE LA TAULA 'TRAMS_FINALS_TMP' QUE CONTINDRA ELS TRAMS QUE FORMEN PART DEL RADI D'ACCIO INDICAT 
#       *****************************************************************************************************************

#       *****************************************************************************************************************
#       INICI FUNCIO PER CREAR ELS TRAMS FINALS AMB LA FRACCIO DE TRAM QUE LI CORRESPON 
#       *****************************************************************************************************************
        sql_1="DROP FUNCTION IF EXISTS Cobertura();\n"
        sql_1+="CREATE OR REPLACE FUNCTION Cobertura() RETURNS SETOF trams_finals_tmp AS\n"
        sql_1+="$BODY$\n"
        sql_1+="DECLARE\n"
        sql_1+="r trams_finals_tmp%rowtype;\n"
        sql_1+="m trams_finals_tmp%rowtype;\n"
        sql_1+="BEGIN\n"
        sql_1+="DROP TABLE IF EXISTS fraccio_trams_raw;\n"
        sql_1+="CREATE local temporary TABLE fraccio_trams_raw (the_geom geometry, punt_id bigint,id_tram bigint,fraccio FLOAT,node bigint,fraccio_inicial FLOAT,cost_invers FLOAT,cost_directe FLOAT,target bigint,radi_inic FLOAT);\n"
        sql_1+="FOR r IN SELECT \"trams_finals_tmp\".* FROM \"trams_finals_tmp\" WHERE \"trams_finals_tmp\".\"id\" not in (select \"edge_id\" from \"punts_interes_tmp\")\n"
        sql_1+="LOOP\n"
        sql_1+="insert into fraccio_trams_raw VALUES(ST_Line_Substring((r.\"the_geom\"),"
        sql_1+="case when (select ST_Line_Locate_Point((r.\"the_geom\"),(select \"geo_punts_finals_tmp\".\"the_geom\" from \"geo_punts_finals_tmp\" where \"geo_punts_finals_tmp\".\"id\"=r.\"node\" and \"geo_punts_finals_tmp\".\"start_vid\"=r.\"id_punt\")))<0.001 then 0 else 1-r.\"fraccio\"\n"
        sql_1+="END,\n"
        sql_1+="case when (select ST_Line_Locate_Point((r.\"the_geom\"),(select \"geo_punts_finals_tmp\".\"the_geom\" from \"geo_punts_finals_tmp\" where \"geo_punts_finals_tmp\".\"id\"=r.\"node\" and \"geo_punts_finals_tmp\".\"start_vid\"=r.\"id_punt\")))<0.001 then r.\"fraccio\" else 1\n"
        sql_1+="END),r.\"id_punt\"*(-1),r.\"id\",0,r.\"node\",0,0,0,0);\n"
        sql_1+="RETURN NEXT r;\n"
        sql_1+="END LOOP;\n"

        sql_1+="FOR m IN SELECT \"trams_finals_tmp\".* FROM \"trams_finals_tmp\" WHERE \"trams_finals_tmp\".\"id\" in (select \"edge_id\" from \"punts_interes_tmp\")\n"
        sql_1+="LOOP\n"
        sql_1+="insert into fraccio_trams_raw VALUES(m.\"the_geom\",m.\"id_punt\"*(-1),m.\"id\",0,m.\"node\",0,0,0);\n"

        sql_1+="RETURN NEXT m;\n"
        sql_1+="END LOOP;\n"

        sql_1+="RETURN;\n"
        sql_1+="END\n"
        sql_1+="$BODY$\n"
        sql_1+="LANGUAGE 'plpgsql' ;\n"
        
        

        progress.setValue(progress.value()+pas_barra_iteracions)
        QApplication.processEvents()

        #print sql_1
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            missatge="Error al crear la taula temporal fraccio_trams_raw"
            print (missatge)
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", missatge)
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            return "ERROR"
            
        sql_1="SELECT \"the_geom\" FROM Cobertura();\n"
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            missatge="Error a l'executar la function Cobertura"
            print (missatge)
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", missatge)
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            return "ERROR"
#       *****************************************************************************************************************
#       FI FUNCIO PER CREAR ELS TRAMS FINALS AMB LA FRACCIO DE TRAM QUE LI CORRESPON 
#       *****************************************************************************************************************

#       *****************************************************************************************************************
#       INICI ACTUALITZACIO DE LA FRACCIO DELS TRAMS INICIALS 
#       *****************************************************************************************************************
        """ActualitzaciÃ³ de la fracciÃ³ dels trams inicials  """
        sql_1="update \"fraccio_trams_raw\" set \"fraccio_inicial\"=\"punts_interes_tmp\".\"fraction\" from \"punts_interes_tmp\" where \"id_tram\"=\"edge_id\""
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            missatge="Error a l'actualitzar els trams inicials de la taula temporal fraccio_trams_raw"
            print (missatge)
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", missatge)
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            return "ERROR"
#       *****************************************************************************************************************
#       FI ACTUALITZACIO DE LA FRACCIO DELS TRAMS INICIALS 
#       *****************************************************************************************************************

#       *****************************************************************************************************************
#       INICI ACTUALITZACIO DELS VALORS DE COST DIRECTE, TARGET, COST INVERS DELS TRAMS INICIALS 
#       *****************************************************************************************************************
        """ActualitzaciÃ³ dels valors de cost directe, target, cost invers dels trams inicials"""
        sql_1="update \"fraccio_trams_raw\" set \"cost_directe\"=\"Xarxa_Graf\".\"cost\",\"target\"=\"Xarxa_Graf\".\"target\",\"cost_invers\"=\"Xarxa_Graf\".\"reverse_cost\" from \"Xarxa_Graf\" where \"id_tram\"=\"id\""
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            missatge="Error a l'actualitzar els valors de cost de la taula temporal fraccio_trams_raw"
            print (missatge)
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", missatge)
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            return "ERROR"
#       *****************************************************************************************************************
#       FI ACTUALITZACIO DELS VALORS DE COST DIRECTE, TARGET, COST INVERS DELS TRAMS INICIALS 
#       *****************************************************************************************************************

#       *****************************************************************************************************************
#       INICI ACTUALITZACIO DEL VALOR DEL CAMP RADI INICIAL EN EL CASE QUE SIGUI RADI VARIABLE 
#       *****************************************************************************************************************
        
        """En el cas de radi variable, s'actualiza el camp radi inicial dels trams inicials """
        sql_1="update \"fraccio_trams_raw\" set \"radi_inic\"=\"geo_punts_finals_tmp\".\"init_radi\" from \"geo_punts_finals_tmp\" where \"punt_id\"*-1=\"start_vid\""
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            missatge="Error a l'actualitzar els valors de radi inicial de la taula temporal fraccio_trams_raw"
            print (missatge)
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", missatge)
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            return "ERROR"
#       *****************************************************************************************************************
#       FI ACTUALITZACIO DEL VALOR DEL CAMP RADI INICIAL EN EL CASE QUE SIGUI RADI VARIABLE 
#       *****************************************************************************************************************

        
#       *****************************************************************************************************************
#       INICI CALCUL DE LA FRACCIO DE CADA TRAM FINAL 
#       *****************************************************************************************************************
        """Calcul del la fracci� final de cada tram en el cas d'haber escollit distancia"""
        cost_tram="ST_Length(\"fraccio_trams_raw\".\"the_geom\")"
        where_tram=""
        sql_1="UPDATE \"fraccio_trams_raw\" SET \"fraccio\"=" 
        """ Si el radi es fix"""
        sql_1+="((case when (\"fraccio_trams_raw\".\"fraccio_inicial\"*"+cost_tram+")>"+self.dlg.txt_radiFix.text()+" then ("+self.dlg.txt_radiFix.text()+"/"+cost_tram+") else \"fraccio_trams_raw\".\"fraccio_inicial\" end)"
        sql_1+="+"
        sql_1+="(case when ((1-\"fraccio_trams_raw\".\"fraccio_inicial\")*"+cost_tram+")>"+self.dlg.txt_radiFix.text()+" then ("+self.dlg.txt_radiFix.text()+"/"+cost_tram+") else (1-\"fraccio_trams_raw\".\"fraccio_inicial\") end))"
        sql_1+=where_tram+";\n"
        
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            missatge="Error a l'actualitzar la fraccio final de tram de la taula temporal fraccio_trams_raw"
            print (missatge)
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", missatge)
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            return "ERROR"

#       *****************************************************************************************************************
#       FI CALCUL DE LA FRACCIO DE CADA TRAM FINAL 
#       *****************************************************************************************************************

#       *****************************************************************************************************************
#       INICI MODIFICACIO DE LA GEOMETRIA DELS TRAMS FINALS SEGONS LA FRACCIO CALCULADA 
#       *****************************************************************************************************************
        """Es modifiquen els trams finals del trajecte segons el que falti per arribar al cost desitjat"""
        sql_1="update \"fraccio_trams_raw\" set \"the_geom\"=final.\"the_geom\"" 
        sql_1+="from"
        sql_1+="(select distinct(ST_Line_Substring("
        sql_1+="(m.\"the_geom\")"
        sql_1+=","
        sql_1+="(case when (select ST_Line_Locate_Point((m.\"the_geom\"),(select \"the_geom\" from \"geo_punts_finals_tmp\" where \"geo_punts_finals_tmp\".\"id\"=m.\"node\" and \"geo_punts_finals_tmp\".\"start_vid\"=m.\"punt_id\"*-1)))<0.01 then 0 else 1-m.\"fraccio\" END)"
        sql_1+=","
        sql_1+="(case when (select ST_Line_Locate_Point((m.\"the_geom\"),(select \"the_geom\" from \"geo_punts_finals_tmp\" where \"geo_punts_finals_tmp\".\"id\"=m.\"node\" and \"geo_punts_finals_tmp\".\"start_vid\"=m.\"punt_id\"*-1)))<0.01 then m.\"fraccio\" else 1 END)"
        sql_1+="))  the_geom"
        sql_1+=","
        sql_1+="m.\"id_tram\""
        sql_1+="from \"fraccio_trams_raw\" m "
        sql_1+="where m.\"id_tram\" in (select \"edge_id\" from \"punts_interes_tmp\")) final "
        sql_1+="where final.\"id_tram\" =\"fraccio_trams_raw\".\"id_tram\";\n"
        progress.setValue(progress.value()+pas_barra_iteracions)
        QApplication.processEvents()
        
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            missatge="Error a l'actualitzar la geometria final de la taula temporal fraccio_trams_raw"
            print (missatge)
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", missatge)
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            return "ERROR"
#       *****************************************************************************************************************
#       FI MODIFICACIO DE LA GEOMETRIA DELS TRAMS FINALS SEGONS LA FRACCIO CALCULADA 
#       *****************************************************************************************************************
        
#       *****************************************************************************************************************
#       INICI INSERTAR ELS TRAMS INICIALS DELS QUE PARTIRA EL GRAF 
#       *****************************************************************************************************************
        """S'afegeixen els trams inicials de cada graf per modificarlos posteriorment"""
        sql_1="insert into \"fraccio_trams_raw\" (select SX.\"the_geom\",PI.\"pid\" as punt_id,SX.\"id\"as id_tram,999 as fraccio,SX.\"source\" as node,PI.\"fraction\" as fraccio_inicial,SX.\"cost\",SX.\"reverse_cost\" from \"Xarxa_Graf\" SX inner join (Select \"edge_id\",\"pid\",\"fraction\" from \"punts_interes_tmp\") PI on SX.\"id\"=PI.\"edge_id\");\n"
        #print sql_1
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            missatge="Error a l'actualitzar la fraccio inicial de tram de la taula temporal fraccio_trams_raw"
            print (missatge)
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", missatge)
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            return "ERROR"
#       *****************************************************************************************************************
#       FI INSERTAR ELS TRAMS INICIALS DELS QUE PARTIRA EL GRAF 
#       *****************************************************************************************************************

#       *****************************************************************************************************************
#       INICI MODIFICACIO DELS TRAMS INICIALS EN EL CAS QUE LA DISTANCIA A RECORRER SIGUI MES PETITA QUE EL PROPI TRAM 
#       *****************************************************************************************************************
        
        """ Calcul amb distancia i radi variable"""
        
        """En el cas de radi variable, s'actualiza el camp radi inicial dels trams inicials """
        sql_1="update \"fraccio_trams_raw\" set \"radi_inic\"=\"tbl_punts_finals_tmp\".\"init_radi\" from \"tbl_punts_finals_tmp\" where \"punt_id\"*-1=\"start_vid\" and \"fraccio\"=999"
        #print sql_1
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            missatge="Error a l'actualitzar el camp radi_inic de la taula temporal fraccio_trams_raw"
            print (missatge)
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", missatge)
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            return "ERROR"
    
        cost_tram="ST_Length(SXI.\"the_geom\")"
        sql_1="UPDATE \"fraccio_trams_raw\" set \"the_geom\"=final.\"the_geom\" from (select ST_Line_Substring((SXI.\"the_geom\"),"
        sql_1+="(case when (FT.\"fraccio_inicial\"-(FT.\"radi_inic\"/"+cost_tram+"))>0 then (FT.\"fraccio_inicial\"-(FT.\"radi_inic\"/"+cost_tram+")) else 0 end)"
        sql_1+=","
        sql_1+="(case when (FT.\"fraccio_inicial\"+(FT.\"radi_inic\"/"+cost_tram+"))<1 then (FT.\"fraccio_inicial\"+(FT.\"radi_inic\"/"+cost_tram+")) else 1 end)"
        sql_1+=") as the_geom, FT.\"punt_id\",FT.\"id_tram\",FT.\"fraccio\" "
        sql_1+="from \"fraccio_trams_raw\"FT inner join (select SX.\"the_geom\" as the_geom,SX.\"id\" as tram_xarxa from \"Xarxa_Graf\" SX, \"punts_interes_tmp\" PI where SX.\"id\"=PI.\"edge_id\") SXI on FT.\"id_tram\"=SXI.tram_xarxa where FT.\"fraccio\"=999) final"
        sql_1+=" where \"fraccio_trams_raw\".\"punt_id\"=final.\"punt_id\" and \"fraccio_trams_raw\".\"fraccio\"=999;\n"
            
        
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            missatge="Error a l'actualitzar la part inicial de la geometria de la taula temporal fraccio_trams_raw"
            print (missatge)
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", missatge)
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            return "ERROR"
#       *****************************************************************************************************************
#       FI MODIFICACIO DELS TRAMS INICIALS EN EL CAS QUE LA DISTANCIA A RECORRER SIGUI MES PETITA QUE EL PROPI TRAM 
#       *****************************************************************************************************************


#       *****************************************************************************************************************
#       INICI CREACIO TAULA FRACCIO_TRAMS_TMP I ELIMINACIO DE TRAMS DUPLICATS 
#       *****************************************************************************************************************
        sql_1="DROP TABLE IF EXISTS fraccio_trams_tmp;\n"

        """EliminaciÃ³ de trams duplicats"""
        sql_1+="CREATE local temporary TABLE fraccio_trams_tmp AS (select distinct(the_geom),punt_id,radi_inic from fraccio_trams_raw);\n"
        
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            missatge="Error en la eliminació de trams duplicats de la taula temporal fraccio_trams_tmp"
            print (missatge)
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", missatge)
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            return "ERROR"
#       *****************************************************************************************************************
#       FI CREACIO TAULA FRACCIO_TRAMS_TMP I ELIMINACIO DE TRAMS DUPLICATS 
#       *****************************************************************************************************************

#       *****************************************************************************************************************
#       INICI CREACIO TAULA GRAF_UTILITZAT_(DATA) QUE CONTINDRA ELS TRAMS UNITS DEL GRAF 
#       *****************************************************************************************************************
        """ Es fa la uniÃ³ de tots els trams des del servidor POSTGRES dins de la taula Graf_utilitzat_(data)"""
        sql_1="drop table if exists \"graf_utilitzat_"+Fitxer+"\";\n"
        sql_1+="create table \"graf_utilitzat_"+Fitxer+"\" AS (Select ST_Union(TOT.the_geom) the_geom, TOT.\"punt_id\" from (select the_geom,punt_id,radi_inic from fraccio_trams_tmp) TOT group by TOT.\"punt_id\");\n"
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            missatge="Error al crear la taula temporal graf_utilitzat_"+fitxer
            print (missatge)
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", missatge)
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            return "ERROR"
#       *****************************************************************************************************************
#       FI CREACIO TAULA GRAF_UTILITZAT_(DATA) QUE CONTINDRA ELS TRAMS UNITS DEL GRAF 
#       *****************************************************************************************************************

#       *****************************************************************************************************************
#       INICI CREACIO TAULA BUFFER_FINAL_(DATA) QUE CONTINDRA EL BUFFER DE LA UNIO DELS TRAMS 
#       *****************************************************************************************************************
        sql_1+="drop table if exists \"buffer_final\";\n"
        sql_1+="create local temp table \"buffer_final\" AS (Select ST_Union(TOT.the_geom) the_geom, TOT.\"punt_id\" from (Select ST_Buffer(the_geom,"+self.dlg.txt_radi.text()+") the_geom,punt_id from fraccio_trams_tmp)TOT group by TOT.\"punt_id\");\n"
            
        try:
            cur.execute(sql_1)
            conn.commit()
        except Exception as ex:
            missatge="Error al crear la taula temporal buffer_final"
            print (missatge)
            
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            
            QMessageBox.information(None, "Error", missatge)
            conn.rollback()
            self.eliminaTaulesCalcul(Fitxer)

            self.bar.clearWidgets()
            self.dlg.Progres.setValue(0)
            self.dlg.Progres.setVisible(False)
            self.dlg.lblEstatConn.setText('Connectat')
            self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
            return "ERROR"
#       *****************************************************************************************************************
#       FI CREACIO TAULA BUFFER_FINAL_(DATA) QUE CONTINDRA EL BUFFER DE LA UNIO DELS TRAMS 
#       *****************************************************************************************************************

        if not(self.dlg.CB_dibuixarGraf.isChecked()):
            sql_1="drop table if exists \"graf_utilitzat_"+Fitxer+"\";\n"
            try:
                cur.execute(sql_1)
                conn.commit()
            except:
                print ("Error 18")
        sql_total="buffer_final"
        return sql_total
   
    def calcul_graf2(self,sql_punts,sql_xarxa,uri2,radi):
        #               *****************************************************************************************************************
        #               INICI CARREGA DE LES ILLES, PARCELES O PORTALS QUE QUEDEN AFECTATS PEL BUFFER DEL GRAF 
        #               *****************************************************************************************************************
        #                uri.setDataSource("","("+sql_total+")","geom","","id")
        QApplication.processEvents()
        uri2.setDataSource("","("+sql_punts+")","geom","","id")
        QApplication.processEvents()
        punts_lyr = QgsVectorLayer(uri2.uri(False), "punts", "postgres")
        QApplication.processEvents()
        uri2.setDataSource("","("+sql_xarxa+")","the_geom","","id")
        QApplication.processEvents()
        network_lyr = QgsVectorLayer(uri2.uri(False), "xarxa", "postgres")
        QApplication.processEvents()
        #if (punts_lyr.isValid() and network_lyr.isValid()):
        parameters = {'INPUT': network_lyr,
                      'START_POINTS': punts_lyr,
                      'STRATEGY': 0,
                      'TRAVEL_COST':radi,
                      'DIRECTION_FIELD': '',
                      'VALUE_FORWARD': '',
                      'VALUE_BACKWARD': '',
                      'VALUE_BOTH': '',
                      'DEFAULT_DIRECTION': 2,
                      'SPEED_FIELD': '',
                      'DEFAULT_SPEED': 1,
                      'TOLERANCE': 0,
                      'INCLUDE_BOUNDS': 0,
                      'OUTPUT_LINES': 'memory:',
                      'OUTPUT': 'memory:'}
        #linias_graf = processing.run('qgis:serviceareafromlayer', parameters)
        feedback = QgsProcessingFeedback()
        context = dataobjects.createContext(feedback)  
        # print(punts_lyr.featureCount())
        linias_graf = self.CCU_ServiceArea(network_lyr,punts_lyr,context,parameters)
        #QgsProject.instance().addMapLayer(linias_graf)
        QApplication.processEvents()
        # native:dissolve
        try:
            result_dissolve = processing.run('native:dissolve', {"INPUT": linias_graf,
                                                                 "FIELD": 'id',
                                                                 "OUTPUT": 'memory:'})        
        except:
            missatge="El nombre d'habitants proper a les entitats escollides, es massa elevat. Pot ser degut a la poca capacitat de les entitats o a haber escollit un target de població massa elevat pel tipus de entitat."
            print(missatge)
            QMessageBox.information(None, "Error", "El nombre d'habitants proper a les entitats escollides, es massa elevat. Pot ser degut a la poca capacitat de les entitats o a haber escollit un target de població massa elevat pel tipus de entitat.")
            return "ERROR"

        result_singleparts = processing.run('native:multiparttosingleparts', {"INPUT": linias_graf,
                                                                              "OUTPUT": 'memory:'})
        result_buffer = processing.run('native:buffer', {"INPUT": result_singleparts['OUTPUT'],
                                                         "DISTANCE": 20,
                                                         "SEGMENTS": 5,
                                                         "END_CAP_STYLE":0,
                                                         "JOIN_STYLE":0,
                                                         "MITER_LIMIT":1,
                                                         "DISSOLVE":0,
                                                         "OUTPUT": 'memory:'})
                                                         #"OUTPUT": 'postgres: table="public"."testpep" (geom) '+uri2.connectionInfo()})
        
        result_buffer_dissolve = processing.run('native:dissolve', {"INPUT": result_buffer['OUTPUT'],
                                                                    "FIELD": 'id',
                                                                    "OUTPUT": 'memory:'})
        
        buffer_dissolved = processing.run('native:dissolve', {"INPUT": result_buffer['OUTPUT'],
                                                             "OUTPUT": 'memory:'})        
        
        return result_buffer_dissolve['OUTPUT'],linias_graf

    
    
    def CCU_ServiceArea(self, network, startPoints,context,parameters):
        #network = self.parameterAsSource(parameters, self.INPUT, context)
        lineas=QgsVectorLayer("LineString?crs="+network.crs().authid(), "temp", "memory");
        pr = lineas.dataProvider()
        list_feat=[]

        if network is None:
            raise QgsProcessingException(self.invalidSourceError(parameters, parameters['INPUT']))

        #startPoints = self.parameterAsSource(parameters, self.START_POINTS, context)
        if startPoints is None:
            raise QgsProcessingException(self.invalidSourceError(parameters, parameters['START_POINTS']))

        strategy = parameters['STRATEGY']
        travelCost = float(parameters['TRAVEL_COST'])

        directionFieldName = parameters['DIRECTION_FIELD']
        forwardValue = parameters['VALUE_FORWARD']
        backwardValue = parameters['VALUE_BACKWARD']
        bothValue = parameters['VALUE_BOTH']
        defaultDirection = parameters['DEFAULT_DIRECTION']
        speedFieldName = parameters['SPEED_FIELD']
        defaultSpeed = parameters['DEFAULT_SPEED']
        tolerance = parameters['TOLERANCE']

        include_bounds = False # default to true to maintain 3.0 API
        camps=[]
        fields = startPoints.fields()
        fields.append(QgsField('type', QVariant.String, '', 254, 0))
        fields.append(QgsField('start', QVariant.String, '', 254, 0))
        for camp in fields:
            camps.append(camp)
        pr.addAttributes(camps)
        lineas.updateFields()
        feat = QgsFeature()
        feat.setFields(fields)

        directionField = -1
        if directionFieldName:
            directionField = network.fields().lookupField(directionFieldName)
        speedField = -1
        if speedFieldName:
            speedField = network.fields().lookupField(speedFieldName)

        director = QgsVectorLayerDirector(network,
                                          directionField,
                                          forwardValue,
                                          backwardValue,
                                          bothValue,
                                          defaultDirection)

        distUnit = context.project().crs().mapUnits()
        multiplier = QgsUnitTypes.fromUnitToUnitFactor(distUnit, QgsUnitTypes.DistanceMeters)
        if strategy == 0:
            strategy = QgsNetworkDistanceStrategy()
        else:
            strategy = QgsNetworkSpeedStrategy(speedField,
                                               defaultSpeed,
                                               multiplier * 1000.0 / 3600.0)

        director.addStrategy(strategy)
        builder = QgsGraphBuilder(network.sourceCrs(),
                                  True,
                                  tolerance)

        #feedback.pushInfo(QCoreApplication.translate('ServiceAreaFromLayer', 'Loading start pointsâ€¦'))
        request = QgsFeatureRequest()
        request.setDestinationCrs(network.sourceCrs(), context.transformContext())
        features = startPoints.getFeatures(request)
        total = 100.0 / startPoints.featureCount() if startPoints.featureCount() else 0

        points = []        
        source_attributes = {}
        i = 0
        for current, f in enumerate(features):

            if not f.hasGeometry():
                continue

            for p in f.geometry().vertices():
                points.append(QgsPointXY(p))
                source_attributes[i] = f.attributes()
                #print(source_attributes[i])
                #print(source_attributes[i][len(source_attributes[i])-1])
                i += 1

        snappedPoints = director.makeGraph(builder, points)

        graph = builder.graph()

        total = 100.0 / len(snappedPoints) if snappedPoints else 1
        for i, p in enumerate(snappedPoints):
            travelCost = source_attributes[i][len(source_attributes[i])-1]
            idxStart = graph.findVertex(snappedPoints[i])
            origPoint = points[i].toString()
            
            tree, cost = QgsGraphAnalyzer.dijkstra(graph, idxStart, 0)

            vertices = set()
            area_points = []
            lines = []
            for vertex, start_vertex_cost in enumerate(cost):
                inbound_edge_index = tree[vertex]
                if inbound_edge_index == -1 and vertex != idxStart:
                    # unreachable vertex
                    continue
  
                if start_vertex_cost > travelCost:
                    # vertex is too expensive, discard
                    continue

                vertices.add(vertex)
                start_point = graph.vertex(vertex).point()

                # find all edges coming from this vertex
                for edge_id in graph.vertex(vertex).outgoingEdges():
                    edge = graph.edge(edge_id)
                    end_vertex_cost = start_vertex_cost + edge.cost(0)
                    end_point = graph.vertex(edge.toVertex()).point()
                    if end_vertex_cost <= travelCost:
                        # end vertex is cheap enough to include
                        vertices.add(edge.toVertex())
                        lines.append([start_point, end_point])
                    else:
                        # travelCost sits somewhere on this edge, interpolate position
                        interpolated_end_point = QgsGeometryUtils.interpolatePointOnLineByValue(start_point.x(), start_point.y(), start_vertex_cost,
                                                                                                end_point.x(), end_point.y(), end_vertex_cost, travelCost)
                        area_points.append(interpolated_end_point)
                        lines.append([start_point, interpolated_end_point])

            for v in vertices:
                area_points.append(graph.vertex(v).point())

            feat = QgsFeature()

            geom_lines = QgsGeometry.fromMultiPolylineXY(lines)
            feat.setGeometry(geom_lines)
            attrs = source_attributes[i]
            attrs.extend(['lines', origPoint])
            feat.setAttributes(attrs)
            list_feat.append(feat)

        pr.addFeatures(list_feat)
        
        # commit to stop editing the layer
        lineas.commitChanges()
        
        # update layer's extent when new features have been added
        # because change of extent in provider is not propagated to the layer
        lineas.updateExtents()

        return lineas
    
    
    
    def arxiusExisteixen(self, path):
        '''Aquesta funcio s'encarrega de comprovar que els arxius necessaris per a cada execuciÃ³ estiguin a la carpeta seleccio'''
        if self.dlg.bt_ILLES.isChecked():
            if (os.path.exists(path + "\\tr_illes.csv")):
                return True
            else:
                QMessageBox.information(None, "ERROR 0: LECTURA DE LES ILLES", "No s'ha trobat l'arxiu de les illes.")
                return False
        elif (self.dlg.bt_Parcel.isChecked()):
            if (os.path.exists(path + "\\tr_parceles.csv") and os.path.exists(path + "\\tr_illes.csv")):
                return True
            else:
                QMessageBox.information(None, "ERROR 1: LECTURA DE LES PARCELÂ·LES", "No s'han trobat els arxius de illes ni parcelÂ·les.")
                return False
        else:
            if (os.path.exists(path + "\\tr_npolicia.csv") and os.path.exists(path + "\\tr_illes.csv")):
                return True
            else:
                QMessageBox.information(None, "ERROR 2: LECTURA DELS NÃšMEROS DE POLICIA", "No s'han trobat els arxius de illes ni nÃºmeros de policia.")
                return False


    
    def on_click_Inici(self):
        """Aquesta funcio genera tots els calculs amb tots el parametres que li hem introduit
        a la finestra a traves dels elements de la interficie."""
        global micolor
        global micolorArea
        global Fitxer
        global cur
        global conn
        global nomBD1
        global contra1
        global host1
        global port1
        global usuari1
        global schema
        global progress
        global geometria
        global pas_barra_iteracions

        Fitxer=datetime.datetime.now().strftime("%Y%m%d%H%M%S%f")
        consoleWidget = iface.mainWindow().findChild( QDockWidget, 'PythonConsole' )
        if consoleWidget is None:
            iface.actionShowPythonDialog().trigger()
            QApplication.processEvents()
            consoleWidget = iface.mainWindow().findChild( QDockWidget, 'PythonConsole' )
            consoleWidget.console.shellOut.clearConsole()
            consoleWidget.setVisible( False )
        errors = self.controlErrors()
        if len(errors) > 0:
            llista = "Llista d'errors:\n\n"
            for i in range (0,len(errors)):
                llista += ("- "+errors[i] + '\n') 
                
            QMessageBox.information(None, "Error", llista)
            return
        
        arxiuLlegit = False
        QApplication.processEvents()
#       *****************************************************************************************************************
#       INICI CREACIO DE LES TAULES RESUM DESDE EL CSV SUMINISTRAT 
#       *****************************************************************************************************************
        path = ''
        
        trobat = False
        a=time.time()
        while (not trobat):
            path = QFileDialog.getExistingDirectory(self.dlg,
                "Busca la carpeta que contÃ© els arxius provinents del mÃ²dul TAULA RESUM",  Path_Inicial+"\\",
                QFileDialog.ShowDirsOnly)
            if (path != ''):
                if (self.arxiusExisteixen(path)):                
                    trobat = True                    
                    arxiu = open(path + "\\tr_illes.csv", 'r')
                    dummy=arxiu.readline()
                    lines = arxiu.readlines()
                    try:
                        drop="DROP TABLE IF EXISTS \"Illes_Resum\";\n"
                        cur.execute(drop)
                        conn.commit()
                        """CreaciÃ³ de la taula temporal Illes_resum_(data) de les dades del CSV de la taula resum d'illes"""
                        cur.execute("CREATE local temp TABLE \"Illes_Resum\" (\"ILLES_Codificades\" varchar(20), \"Habitants\" numeric);")
                        conn.commit()
                        insert=""
                        for linia in lines:
                            vec = linia.split(';', 20 )
                            insert += "INSERT INTO \"Illes_Resum\" (\"ILLES_Codificades\", \"Habitants\") VALUES ('"+ vec[0] + "', "+ vec[1]+ ");\n"
                        cur.execute(insert)
                        conn.commit()
                    except Exception as ex:
                        print ("I am unable to connect to the database")
                        template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                        message = template.format(type(ex).__name__, ex.args)
                        print (message)
                        self.barraEstat_Error()
                        QMessageBox.information(None, "Error", "I am unable to connect to the database")
                        self.eliminaTaulesCalcul(Fitxer)
                        return
                    
                    
                    arxiu.close()
                    arxiuLlegit = True
    
                    if (self.dlg.bt_Parcel.isChecked()):
                        trobat = True 
                        
                        arxiu = open(path + "\\tr_parceles.csv", 'r')
                        dummy=arxiu.readline()
                        lines = arxiu.readlines()
                        try:
                            drop="DROP TABLE IF EXISTS \"Parcel_Resum\";\n"
                            cur.execute(drop)
                            conn.commit()
                            self.barraEstat_llegint()
                            """CreaciÃ³ de la taula temporal Resum_Temp_(data) de les dades del CSV de la taula resum de parceles"""
                            cur.execute("CREATE local temp TABLE \"Parcel_Resum\" (\"Parcela\" varchar(20), \"Habitants\" numeric);")
                            conn.commit()
                            insert=""
                            for linia in lines:
                                vec = linia.split(';', 20 )
                                insert += "INSERT INTO \"Parcel_Resum\" (\"Parcela\", \"Habitants\") VALUES ('"+ vec[0] + "', "+ vec[1]+ ");\n"
                            cur.execute(insert)
                            conn.commit()
                            #print "ok"                
                        except Exception as ex:
                            print ("I am unable to connect to the database")
                            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                            message = template.format(type(ex).__name__, ex.args)
                            print (message)
                            self.barraEstat_Error()
                            QMessageBox.information(None, "Error", "I am unable to connect to the database")
                            self.eliminaTaulesCalcul(Fitxer)
                
                            return
                        
                        arxiu.close()
                        arxiuLlegit = True
    
            
                    if (self.dlg.bt_Portals.isChecked()):
                        trobat = True 
                        
                        arxiu = open(path + "\\tr_npolicia.csv", 'r')
                        dummy=arxiu.readline()
                        lines = arxiu.readlines()
                        try:
                            drop="DROP TABLE IF EXISTS \"NPolicia_Resum\";\n"
                            cur.execute(drop)
                            conn.commit()
                            self.barraEstat_llegint()
                            """CreaciÃ³ de la taula temporal Resum_Temp_(data) de les dades del CSV de la taula resum de portals"""
                            cur.execute("CREATE local temp TABLE \"NPolicia_Resum\" (\"NPolicia\" varchar(20), \"Habitants\" numeric);")
                            conn.commit()
                            insert=""
                            for linia in lines:
                                vec = linia.split(';', 20 )
                                insert += "INSERT INTO \"NPolicia_Resum\" (\"NPolicia\", \"Habitants\") VALUES ('"+ vec[0] + "', "+ vec[1]+ ");\n"
                            cur.execute(insert)
                            conn.commit()
                            #print "ok"                
                        except Exception as ex:
                            print ("I am unable to connect to the database")
                            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                            message = template.format(type(ex).__name__, ex.args)
                            print (message)
                            self.barraEstat_Error()
                            QMessageBox.information(None, "Error", "I am unable to connect to the database")
                            self.eliminaTaulesCalcul(Fitxer)
                
                            return
                        
                        arxiu.close()
                        arxiuLlegit = True
                else:
                   print ("Path no vÃ lid")
            else:
                print ("Cancelat")
                return
        
        fesCalcul = True      
        if ((not arxiuLlegit)):
            fesCalcul = False
        
        if not(fesCalcul):
            return
        
        progressMessageBar = self.bar.createMessage('Processant:')
        progress = QProgressBar()
        progress.setMaximum(100)
        progress.setAlignment(Qt.AlignLeft|Qt.AlignTop)
        progressMessageBar.layout().addWidget(progress)
        self.bar.pushWidget(progressMessageBar, Qgis.Info)
        self.bar.setEnabled(False)
        progress.setValue(0)
        QApplication.processEvents()

#       *****************************************************************************************************************
#       CREACIO DE TAULA PROVISIONAL DE CAMP DE PUNTS + CAMP DE COBERTURA
#       *****************************************************************************************************************
        self.barraEstat_processant()
        self.on_click_Recalcular()
        try:
            drop="DROP TABLE IF EXISTS \"TaulaPunts_Temp\";\n"
            cur.execute(drop)
            conn.commit()
            """Creació de la taula temporal TaulaPunts_Temp_(data) de la taula de punts + el camp virtual que s'ha d'afegir (cobertura)"""
            create = "create local temp table \"TaulaPunts_Temp\" AS SELECT * FROM \"EntitatPuntual_Temp_"+Fitxer+"\";"
            cur.execute(create)
            conn.commit()
            alter = "ALTER TABLE  \"TaulaPunts_Temp\" ADD COLUMN \"Cobertura\" real NULL;"
            #ALTER TABLE "TaulaPunts_Temp_1" ADD COLUMN "Cobertura" real NULL;
            cur.execute(alter)
            conn.commit
            numero = float(self.dlg.txt_percentatge.text())
            numero2 = numero/100.0
            update = "UPDATE  \"TaulaPunts_Temp\" SET \"Cobertura\" = "+ str(numero2) +";"
            cur.execute(update)
            conn.commit
            #print "ok"                
        except Exception as ex:
            print ("I am unable to create the table")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            self.barraEstat_Error()
            QMessageBox.information(None, "Error", "I am unable to create the table")
            self.eliminaTaulesCalcul(Fitxer)

            return
            
#       *****************************************************************************************************************
#       CREACIO DE TAULA PROVISIONAL DE ILLES + CSV
#       *****************************************************************************************************************
        taula = ""
        
        try:      
            create = "create table \"JoinIlles_Habitants_Temp_"+ Fitxer + "\" AS select \"id\", \"D_S_I\", \"Habitants\", \"geom\" from \"Illes_Resum\", \"ILLES\" where \"ILLES_Codificades\" = \"D_S_I\";"
            cur.execute(create)
            taula = "\"JoinIlles_Habitants_Temp_"+ Fitxer + "\""
            conn.commit()
        except Exception as ex:
            print ("no s'ha creat illes")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            self.barraEstat_Error()
            QMessageBox.information(None, "Error", "no s'ha creat illes")
            self.eliminaTaulesCalcul(Fitxer)

            return
            
        if (self.dlg.bt_Parcel.isChecked()):
            try:
                drop="DROP TABLE IF EXISTS \"JoinParcel_Habitants_Temp\";\n"
                cur.execute(drop)
                conn.commit()
                #select "Parcela","geom", "Habitants"  from "ResumParcela", "parcel" where "Parcela" = "UTM";
                create = "create local temp table \"JoinParcel_Habitants_Temp\" AS select \"id\",\"Parcela\",\"geom\", \"Habitants\" from \"Parcel_Resum\", \"parcel\" where \"Parcela\" = \"UTM\";"
                cur.execute(create)
                taula = "\"JoinParcel_Habitants_Temp\""
                conn.commit()
            except Exception as ex:
                print ("no s'ha creat parcel")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                self.barraEstat_Error()
                QMessageBox.information(None, "Error", "no s'ha creat parcel")
                self.eliminaTaulesCalcul(Fitxer)
    
                return
                
                
        if (self.dlg.bt_Portals.isChecked()):
            try:
                drop="DROP TABLE IF EXISTS \"JoinNPol_Habitants_Temp\";\n"
                cur.execute(drop)
                conn.commit()
                #select * from "ResumNPolicia", "dintreilla" where "NPolicia" = "Carrer_Num_Bis";
                create = "create local temp table \"JoinNPol_Habitants_Temp\" AS select \"id\",\"NPolicia\",\"geom\", \"Habitants\" from \"NPolicia_Resum\", \"dintreilla\" where \"NPolicia\" = \"Carrer_Num_Bis\";"
                cur.execute(create)
                taula = "\"JoinNPol_Habitants_Temp\""
                conn.commit()
            except Exception as ex:
                print ("no s'ha creat npolicia")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                self.barraEstat_Error()
                QMessageBox.information(None, "Error", "no s'ha creat npolicia")
                self.eliminaTaulesCalcul(Fitxer)
    
                return
                
        
#       *****************************************************************************************************************
#       CREACIO DE TAULA PROVISIONAL DE PUNTS I RADI FIX
#       *****************************************************************************************************************     
        try:
            drop="DROP TABLE IF EXISTS \"AgrupacioRadiFix_Temp\";\n"
            cur.execute(drop)
            conn.commit()
            if self.dlg.CB_tramsUtils.isChecked():
                sql_total="SELECT * FROM \"EntitatPuntual_Temp_"+Fitxer+"\""
                pas_barra_iteracions=3
                QApplication.processEvents()
        #       *****************************************************************************************************************
        #       INICI CALCUL DEL GRAF I DEL BUFFER DELS TRAMS CALCULATS 
        #       *****************************************************************************************************************
                
                if (self.dlg.chk_calc_local.isChecked()):
                    uri = QgsDataSourceUri()    
                    try:
                        uri.setConnection(host1,port1,nomBD1,usuari1,contra1)
                        print ("Connectat")
                        #print (uri.connectionInfo())
                    except Exception as ex:
                        print ("Error a la connexio")
                        template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                        message = template.format(type(ex).__name__, ex.args)
                        print (message)
                        self.barraEstat_Error()
                        QMessageBox.information(None, "Error", "Error a la connexio")
                        self.eliminaTaulesCalcul(Fitxer)
            
                        return
                        
                        
                    selectRadi = "SELECT DISTINCT \"RadiInicial\" FROM \"EntitatPuntual_Temp_"+Fitxer+"\""
                    cur.execute(selectRadi)
                    radi = cur.fetchone()
                    sql_xarxa="SELECT * FROM \""+self.dlg.comboGraf.currentText()+"\""
                    buffer_resultat,graf_resultat=self.calcul_graf2(sql_total,sql_xarxa,uri,float(radi[0]))#self.dlg.txt_radi.text()
                    vlayer=buffer_resultat
                    vlayer_graf=graf_resultat
                    #uri = "dbname='test' host=localhost port=5432 user='user' password='password' key=gid type=POINT table=\"public\".\"test\" (geom) sql="
                    # layer - QGIS vector layer
                    sql_1="drop table if exists \"buffer_final_"+Fitxer+"\";\n"
                    cur.execute(sql_1)
                    conn.commit()
                    
                    error = QgsVectorLayerExporter.exportLayer(vlayer, 'table="public"."buffer_final_'+Fitxer+'" (the_geom) '+uri.connectionInfo(), "postgres", vlayer.crs(), False)
                    if error[0] != 0:
                        iface.messageBar().pushMessage(u'Error', error[1])
                        
                    #error = QgsVectorLayerExporter.exportLayer(buffer_dissolved['OUTPUT'], 'table="public"."buffer_diss_'+Fitxer+'" (the_geom) '+uri.connectionInfo(), "postgres", vlayer.crs(), False)
                    #if error[0] != 0:
                    #    iface.messageBar().pushMessage(u'Error', error[1])
                        
                    taula_buffer="buffer_final_"+Fitxer   
                    create = "create table \"AgrupacioRadiFix_Temp\" AS select \"the_geom\", \"geom\", \"TaulaPunts_Temp\".\"id\",\"TaulaPunts_Temp\".\"NPlaces\",\"TaulaPunts_Temp\".\"RadiInicial\",\"TaulaPunts_Temp\".\"Cobertura\" from \"" + taula_buffer + "\" join \"TaulaPunts_Temp\" on (\"" + taula_buffer + "\".\"id\" = \"TaulaPunts_Temp\".\"id\");"     
                
                else:
                    taula_buffer=self.calcul_graf(sql_total, "RadiInicial")
                    if taula_buffer=="ERROR":
                        return
                    
                    create = "create local temp table \"AgrupacioRadiFix_Temp\" AS select \"the_geom\", \"geom\", \"id\",\"NPlaces\",\"RadiInicial\",\"Cobertura\" from \"" + taula_buffer + "\" join \"TaulaPunts_Temp\" on (\"" + taula_buffer + "\".\"punt_id\" = \"TaulaPunts_Temp\".\"id\");"
        #       *****************************************************************************************************************
        #       FI CALCUL DEL GRAF I DEL BUFFER DELS TRAMS CALCULATS 
        #       *****************************************************************************************************************
                
                #â˜¼print create
            else:
                create = "create local temp table \"AgrupacioRadiFix_Temp\" AS Select ST_Buffer(\"geom\",\"TaulaPunts_Temp\".\"RadiInicial\"::double precision,100) \"the_geom\",\"id\",\"geom\",\"NPlaces\",\"RadiInicial\",\"Cobertura\" from \"TaulaPunts_Temp\";"
            cur.execute(create)
            conn.commit()
    
            alter = "alter table \"AgrupacioRadiFix_Temp\" add column \"radi\" integer;\n"
            alter += "UPDATE \"AgrupacioRadiFix_Temp\" SET \"radi\" = \"RadiInicial\"::integer;"
            cur.execute(alter)
            conn.commit()
            
        except Exception as ex:
            print ("no s'ha creat l'agrupacio")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            self.barraEstat_Error()
            QMessageBox.information(None, "Error", "no s'ha creat l'agrupacio")
            self.eliminaTaulesCalcul(Fitxer)

            return
            
        
#       *****************************************************************************************************************
#       CREACIO DE TAULA PROVISIONAL INTERSECCIO ESPACIAL
#       *****************************************************************************************************************
        numeroIteracions = int(float(self.dlg.txt_iteracions.text()))
        i = 0
        pas_barra_iteracions=(60/(numeroIteracions*(2+3))) #2 passos en una iteracio +3 passos per buffer
        while i < numeroIteracions:
            progressMessageBar.setText('Iteració:'+str(i+1))
            print ('Iteració:'+str(i+1))
            if i == 0:
                try:
                    drop="DROP TABLE IF EXISTS \"AgregacioSumaHab_Temp_"+Fitxer+"\";\n"
                    cur.execute(drop)
                    conn.commit()
                    create = "create table \"AgregacioSumaHab_Temp_"+Fitxer+"\" AS select \"AgrupacioRadiFix_Temp\".\"id\", \"AgrupacioRadiFix_Temp\".\"geom\",\"radi\",\"NPlaces\",\"Cobertura\", sum(\"Habitants\") as \"Habitants\" from \"AgrupacioRadiFix_Temp\" join "+ taula + "  on ST_Intersects("+ taula +".\"geom\", \"AgrupacioRadiFix_Temp\".\"the_geom\") group by \"AgrupacioRadiFix_Temp\".\"geom\", \"AgrupacioRadiFix_Temp\".\"id\", \"radi\",\"NPlaces\",\"Cobertura\";"
                    #print create
                    cur.execute(create)
                    conn.commit()  
                except Exception as ex:
                    print ("no s'ha creat l'agregacio")
                    template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                    message = template.format(type(ex).__name__, ex.args)
                    print (message)
                    self.barraEstat_Error()
                    QMessageBox.information(None, "Error", "no s'ha creat l'agregacio")
                    self.eliminaTaulesCalcul(Fitxer)
        
                    return
                    
                progress.setValue(progress.value()+pas_barra_iteracions)
                QApplication.processEvents()

                if self.dlg.CB_tramsUtils.isChecked():
                    try:
                        alter = "alter table \"AgregacioSumaHab_Temp_"+Fitxer+"\" add column \"nouradi\" integer;\n"
                        alter += "UPDATE \"AgregacioSumaHab_Temp_"+Fitxer+"\" SET \"nouradi\" = round((\"radi\"*sqrt((\"NPlaces\"/\"Habitants\")*\"Cobertura\")))::integer;"
                        cur.execute(alter)
                        conn.commit()
                        drop="DROP TABLE IF EXISTS \"AgregacioNouRadi_Temp\";"
                        cur.execute(drop)
                        conn.commit()
                        sql_total="SELECT * FROM \"AgregacioSumaHab_Temp_"+Fitxer+"\""
                        progress.setValue(progress.value()+pas_barra_iteracions)
                        QApplication.processEvents()
                        if (self.dlg.chk_calc_local.isChecked()):
                            uri = QgsDataSourceUri()    
                            try:
                                uri.setConnection(host1,port1,nomBD1,usuari1,contra1)
                                print ("Connectat")
                                #print (uri.connectionInfo())
                            except Exception as ex:
                                print ("Error a la connexio")
                                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                                message = template.format(type(ex).__name__, ex.args)
                                print (message)
                                self.barraEstat_Error()
                                QMessageBox.information(None, "Error", "Error a la connexio")
                                self.eliminaTaulesCalcul(Fitxer)
                    
                                return
                                
                            selectNouRadi = "SELECT DISTINCT \"nouradi\" FROM \"AgregacioSumaHab_Temp_"+Fitxer+"\""
                            cur.execute(selectNouRadi)
                            nouRadi = cur.fetchone()
                            sql_xarxa="SELECT * FROM \""+self.dlg.comboGraf.currentText()+"\""
                            buffer_resultat,graf_resultat=self.calcul_graf2(sql_total,sql_xarxa,uri,float(nouRadi[0]))
                            vlayer=buffer_resultat
                            vlayer_graf=graf_resultat
            
                            #uri = "dbname='test' host=localhost port=5432 user='user' password='password' key=gid type=POINT table=\"public\".\"test\" (geom) sql="
                            # layer - QGIS vector layer
                            sql_1="drop table if exists \"buffer_final_"+Fitxer+"\";\n"
                            cur.execute(sql_1)
                            conn.commit()
                            
                            error = QgsVectorLayerExporter.exportLayer(vlayer, 'table="public"."buffer_final_'+Fitxer+'" (the_geom) '+uri.connectionInfo(), "postgres", vlayer.crs(), False)
                            if error[0] != 0:
                                iface.messageBar().pushMessage(u'Error', error[1])
                                
                            #error = QgsVectorLayerExporter.exportLayer(buffer_dissolved['OUTPUT'], 'table="public"."buffer_diss_'+Fitxer+'" (the_geom) '+uri.connectionInfo(), "postgres", vlayer.crs(), False)
                            #if error[0] != 0:
                            #    iface.messageBar().pushMessage(u'Error', error[1])
                                
                            taula_buffer="buffer_final_"+Fitxer
                            create = "create local temp table \"AgregacioNouRadi_Temp\" AS select \"AgregacioSumaHab_Temp_"+Fitxer+"\".\"id\", \"AgregacioSumaHab_Temp_"+Fitxer+"\".\"radi\", \"AgregacioSumaHab_Temp_"+Fitxer+"\".\"NPlaces\", \"AgregacioSumaHab_Temp_"+Fitxer+"\".\"Habitants\", \"AgregacioSumaHab_Temp_"+Fitxer+"\".\"geom\", \"AgregacioSumaHab_Temp_"+Fitxer+"\".\"Cobertura\", \"" + taula_buffer + "\".\"the_geom\", \"AgregacioSumaHab_Temp_"+Fitxer+"\".\"nouradi\" from \"" + taula_buffer + "\" join \"AgregacioSumaHab_Temp_"+Fitxer+"\" on (\"" + taula_buffer + "\".\"id\" = \"AgregacioSumaHab_Temp_"+Fitxer+"\".\"id\");"     
                        else:
                            taula_buffer=self.calcul_graf(sql_total,"nouradi")
                            if taula_buffer=="ERROR":
                                return
                            
                            create = "create local temp table \"AgregacioNouRadi_Temp\" AS select \"id\", \"radi\", \"NPlaces\", \"Habitants\", \"geom\", \"Cobertura\", \"the_geom\", \"nouradi\" from \"" + taula_buffer + "\" join \"AgregacioSumaHab_Temp_"+Fitxer+"\" on (\"" + taula_buffer + "\".\"punt_id\" = \"AgregacioSumaHab_Temp_"+Fitxer+"\".\"id\");"
                            #print create
                        cur.execute(create)
                        conn.commit()
                    except Exception as ex:
                        print ("Agregacio nou radi no feta")
                        template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                        message = template.format(type(ex).__name__, ex.args)
                        print (message)
                        self.barraEstat_Error()
                        QMessageBox.information(None, "Error", "Agregacio nou radi no feta")
                        self.eliminaTaulesCalcul(Fitxer)
            
                        return
                        
                        
                    progress.setValue(progress.value()+pas_barra_iteracions)
                    QApplication.processEvents()
                else: 
                    try:
                        drop="DROP TABLE IF EXISTS \"AgregacioNouRadi_Temp\";"
                        cur.execute(drop)
                        conn.commit()                    
                        create = "create local temp table \"AgregacioNouRadi_Temp\" AS select \"id\", \"radi\", \"NPlaces\", \"Habitants\", \"geom\", \"Cobertura\", ST_buffer(\"geom\",round((\"radi\"*sqrt((\"NPlaces\"/\"Habitants\")*\"Cobertura\"))),100) the_geom, round((\"radi\"*sqrt((\"NPlaces\"/\"Habitants\")*\"Cobertura\"))) as NouRadi from \"AgregacioSumaHab_Temp_"+Fitxer+"\";"
                        #print create
                        cur.execute(create)
                        conn.commit()
                        progress.setValue(progress.value()+pas_barra_iteracions)
                        QApplication.processEvents()
                    except Exception as ex:
                        print ("Agregacio nou radi no feta")
                        template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                        message = template.format(type(ex).__name__, ex.args)
                        print (message)
                        self.barraEstat_Error()
                        QMessageBox.information(None, "Error", "Agregacio nou radi no feta")
                        self.eliminaTaulesCalcul(Fitxer)
            
                        return
                        
                    progress.setValue(progress.value()+pas_barra_iteracions)
                    QApplication.processEvents()
            else:
                try:
                    drop = "DROP TABLE IF EXISTS \"AgregacioSumaHab_Temp_"+Fitxer+"\";"
                    cur.execute(drop)
                    conn.commit()
                    create = "CREATE TABLE \"AgregacioSumaHab_Temp_"+Fitxer+"\" AS select \"AgregacioNouRadi_Temp\".\"id\", \"AgregacioNouRadi_Temp\".\"geom\",\"nouradi\" as radi,\"NPlaces\",\"Cobertura\", sum("+taula+".\"Habitants\") as \"Habitants\" from \"AgregacioNouRadi_Temp\" join "+ taula + "  on ST_Intersects("+ taula +".\"geom\", \"AgregacioNouRadi_Temp\".\"the_geom\") group by \"AgregacioNouRadi_Temp\".\"geom\", \"AgregacioNouRadi_Temp\".\"id\", \"nouradi\",\"NPlaces\",\"Cobertura\";"
                    #print create
                    cur.execute(create)
                    conn.commit() 
                    progress.setValue(progress.value()+pas_barra_iteracions)
                    QApplication.processEvents()
                except Exception as ex:
                    print ("No s'ha pogut realitzar la tasca")
                    template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                    message = template.format(type(ex).__name__, ex.args)
                    print (message)
                    self.barraEstat_Error()
                    QMessageBox.information(None, "Error", "No s'ha pogut realitzar la tasca")
                    self.eliminaTaulesCalcul(Fitxer)
        
                    return
                    
                    
                if self.dlg.CB_tramsUtils.isChecked():
                    try:
                        alter = "alter table \"AgregacioSumaHab_Temp_"+Fitxer+"\" add column \"nouradi\" integer;\n"
                        alter += "UPDATE \"AgregacioSumaHab_Temp_"+Fitxer+"\" SET \"nouradi\" = round((\"radi\"*sqrt((\"NPlaces\"/\"Habitants\")*\"Cobertura\")))::integer;"
                        cur.execute(alter)
                        conn.commit()
                        drop="DROP TABLE IF EXISTS \"AgregacioNouRadi_Temp\";"
                        cur.execute(drop)
                        conn.commit()
                        sql_total="SELECT * FROM \"AgregacioSumaHab_Temp_"+Fitxer+"\""
                        progress.setValue(progress.value()+pas_barra_iteracions)
                        QApplication.processEvents()
                        if (self.dlg.chk_calc_local.isChecked()):
                            uri = QgsDataSourceUri()    
                            try:
                                uri.setConnection(host1,port1,nomBD1,usuari1,contra1)
                                print ("Connectat")
                                #print (uri.connectionInfo())
                            except Exception as ex:
                                print ("Error a la connexio")
                                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                                message = template.format(type(ex).__name__, ex.args)
                                print (message)
                                self.barraEstat_Error()
                                QMessageBox.information(None, "Error", "Error a la connexio")
                                self.eliminaTaulesCalcul(Fitxer)
                    
                                return
                                
                                
                            selectNouRadi = "SELECT DISTINCT \"nouradi\" FROM \"AgregacioSumaHab_Temp_"+Fitxer+"\""
                            cur.execute(selectNouRadi)
                            nouRadi = cur.fetchone()
                            sql_xarxa="SELECT * FROM \""+self.dlg.comboGraf.currentText()+"\""                     
                            buffer_resultat,graf_resultat=self.calcul_graf2(sql_total,sql_xarxa,uri,float(nouRadi[0]))#self.dlg.txt_radi.text()
                            vlayer=buffer_resultat
                            vlayer_graf=graf_resultat

                            #uri = "dbname='test' host=localhost port=5432 user='user' password='password' key=gid type=POINT table=\"public\".\"test\" (geom) sql="
                            # layer - QGIS vector layer
                            sql_1="drop table if exists \"buffer_final_"+Fitxer+"\";\n"
                            cur.execute(sql_1)
                            conn.commit()
                            
                            error = QgsVectorLayerExporter.exportLayer(vlayer, 'table="public"."buffer_final_'+Fitxer+'" (the_geom) '+uri.connectionInfo(), "postgres", vlayer.crs(), False)
                            if error[0] != 0:
                                iface.messageBar().pushMessage(u'Error', error[1])
                                
                            #error = QgsVectorLayerExporter.exportLayer(buffer_dissolved['OUTPUT'], 'table="public"."buffer_diss_'+Fitxer+'" (the_geom) '+uri.connectionInfo(), "postgres", vlayer.crs(), False)
                            #if error[0] != 0:
                            #    iface.messageBar().pushMessage(u'Error', error[1])
                                
                            taula_buffer="buffer_final_"+Fitxer 
                            create = "create local temp table \"AgregacioNouRadi_Temp\" AS select \"AgregacioSumaHab_Temp_"+Fitxer+"\".\"id\", \"AgregacioSumaHab_Temp_"+Fitxer+"\".\"radi\", \"AgregacioSumaHab_Temp_"+Fitxer+"\".\"NPlaces\", \"AgregacioSumaHab_Temp_"+Fitxer+"\".\"Habitants\", \"AgregacioSumaHab_Temp_"+Fitxer+"\".\"geom\", \"AgregacioSumaHab_Temp_"+Fitxer+"\".\"Cobertura\", \"" + taula_buffer + "\".\"the_geom\", \"AgregacioSumaHab_Temp_"+Fitxer+"\".\"nouradi\" from \"" + taula_buffer + "\" join \"AgregacioSumaHab_Temp_"+Fitxer+"\" on (\"" + taula_buffer + "\".\"id\" = \"AgregacioSumaHab_Temp_"+Fitxer+"\".\"id\");"     
                        else:
                            taula_buffer=self.calcul_graf(sql_total,"nouradi")
                            if taula_buffer=="ERROR":
                                return
                            
                            create = "create local temp table \"AgregacioNouRadi_Temp\" AS select \"id\", \"radi\", \"NPlaces\", \"Habitants\", \"geom\", \"Cobertura\", \"the_geom\", \"nouradi\" from \"" + taula_buffer + "\" join \"AgregacioSumaHab_Temp_"+Fitxer+"\" on (\"" + taula_buffer + "\".\"punt_id\" = \"AgregacioSumaHab_Temp_"+Fitxer+"\".\"id\");"
                            #print create
                        cur.execute(create)
                        conn.commit()
                    except Exception as ex:
                        print ("Agregacio nou radi no feta")
                        template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                        message = template.format(type(ex).__name__, ex.args)
                        print (message)
                        self.barraEstat_Error()
                        QMessageBox.information(None, "Error", "Agregacio nou radi no feta")
                        self.eliminaTaulesCalcul(Fitxer)
            
                        return
                        
                    progress.setValue(progress.value()+pas_barra_iteracions)
                    QApplication.processEvents()
                else:
                    try:
                        drop="DROP TABLE IF EXISTS \"AgregacioNouRadi_Temp\";"
                        cur.execute(drop)
                        conn.commit()            
                        #josep create = "CREATE local temp TABLE \"AgregacioNouRadi_Temp\" AS select \"id\", \"radi\", \"NPlaces\", \"Habitants\", \"geom\", \"Cobertura\", ST_buffer(\"geom\",round((\"radi\"*sqrt((\"NPlaces\"/\"Habitants\")*\"Cobertura\"))),100) the_geom, round((\"radi\"*sqrt((\"NPlaces\"/\"Habitants\")*\"Cobertura\"))) as NouRadi from \"AgregacioSumaHab_Temp_"+Fitxer+"\";"
                        create = "CREATE TABLE \"AgregacioNouRadi_Temp\" AS select \"id\", \"radi\", \"NPlaces\", \"Habitants\", \"geom\", \"Cobertura\", ST_buffer(\"geom\",round((\"radi\"*sqrt((\"NPlaces\"/\"Habitants\")*\"Cobertura\"))),100) the_geom, round((\"radi\"*sqrt((\"NPlaces\"/\"Habitants\")*\"Cobertura\"))) as NouRadi from \"AgregacioSumaHab_Temp_"+Fitxer+"\";"
                        cur.execute(create)
                        conn.commit()
                    except Exception as ex:
                        print ("Agregacio nou radi no feta " + str(i))
                        template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                        message = template.format(type(ex).__name__, ex.args)
                        print (message)
                        self.barraEstat_Error()
                        QMessageBox.information(None, "Error", "Agregacio nou radi no feta " + str(i))
                        self.eliminaTaulesCalcul(Fitxer)
            
                        return
                        
                        
                    progress.setValue(progress.value()+pas_barra_iteracions)
                    QApplication.processEvents()

            i = i + 1
        
#       *****************************************************************************************************************
#       SUMA DELS HABITANTS DESPRES DEL BUCLE
#       *****************************************************************************************************************
        progress.setValue(60)
        try:
            drop="DROP TABLE IF EXISTS \"AgregacioSumaHabPostBucle_Temp\";\n"
            cur.execute(drop)
            conn.commit()
            #josep create = "create local temp table \"AgregacioSumaHabPostBucle_Temp\" AS select \"AgregacioNouRadi_Temp\".\"id\", \"AgregacioNouRadi_Temp\".\"geom\",\"nouradi\" as radi,\"NPlaces\",\"Cobertura\", sum("+taula +".\"Habitants\") as \"Habitants_Solapats\" from \"AgregacioNouRadi_Temp\" join "+ taula + "  on ST_Intersects("+ taula +".\"geom\", \"AgregacioNouRadi_Temp\".\"the_geom\") group by \"AgregacioNouRadi_Temp\".\"geom\", \"AgregacioNouRadi_Temp\".\"id\", \"nouradi\",\"NPlaces\",\"Cobertura\";"
            create = "create table \"AgregacioSumaHabPostBucle_Temp\" AS select \"AgregacioNouRadi_Temp\".\"id\", \"AgregacioNouRadi_Temp\".\"geom\",\"nouradi\" as radi,\"NPlaces\",\"Cobertura\", sum("+taula +".\"Habitants\") as \"Habitants_Solapats\" from \"AgregacioNouRadi_Temp\" join "+ taula + "  on ST_Intersects("+ taula +".\"geom\", \"AgregacioNouRadi_Temp\".\"the_geom\") group by \"AgregacioNouRadi_Temp\".\"geom\", \"AgregacioNouRadi_Temp\".\"id\", \"nouradi\",\"NPlaces\",\"Cobertura\";"
            #print create
            cur.execute(create)
            conn.commit() 
        except Exception as ex:
            print ("No s'ha pogut realitzar la tasca")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            self.barraEstat_Error()
            QMessageBox.information(None, "Error", "No s'ha pogut realitzar la tasca")
            self.eliminaTaulesCalcul(Fitxer)

            return

#       *****************************************************************************************************************
#       CREACIO DEL BUFFER DE ZONES D'INFLUENCIA INTERSECADES (COMBINADES)
#       *****************************************************************************************************************
        try:
            drop="DROP TABLE IF EXISTS \"UnioSumaHab_Temp\";\n"
            drop+="DROP TABLE IF EXISTS \"UnioZI_InfluenciesHab_Temp\";"
            cur.execute(drop)
            conn.commit()
            create = "create local temp table \"UnioSumaHab_Temp\" AS select ST_Union(\"the_geom\") the_geom from \"AgregacioNouRadi_Temp\";\n"
            create += "create local temp table \"UnioZI_InfluenciesHab_Temp\" AS select (ST_Dump(\"the_geom\")).path[1] As id_zi_combi, (ST_Dump(\"the_geom\")).geom the_geom from \"UnioSumaHab_Temp\";"
            #print create
            cur.execute(create)
            conn.commit()
        except Exception as ex:
            print ("No s'ha fet la unio")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            self.barraEstat_Error()
            QMessageBox.information(None, "Error", "No s'ha fet la unio")
            self.eliminaTaulesCalcul(Fitxer)

            return
        
#       *****************************************************************************************************************
#       SUMA DELS HABITANTS REALS QUE VIUEN A LES ZI INTERSECADES 
#       *****************************************************************************************************************    
        try:
            drop="DROP TABLE IF EXISTS \"AgregacioSumaHabConjunt_Temp\";\n"
            cur.execute(drop)
            conn.commit()
            create = "create local temp table \"AgregacioSumaHabConjunt_Temp\" AS "
            create += "select \"id_zi_combi\", sum("+ taula +".\"Habitants\") as \"Habitants\",  \"the_geom\" from \"UnioZI_InfluenciesHab_Temp\" join "+ taula + "  on ST_Intersects("+ taula +".\"geom\", \"UnioZI_InfluenciesHab_Temp\".\"the_geom\") group by \"UnioZI_InfluenciesHab_Temp\".\"id_zi_combi\",\"the_geom\";"
            #print create
            cur.execute(create)
            conn.commit()
        except Exception as ex:
            print ("No s'ha fet l'agregacio post")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            self.barraEstat_Error()
            QMessageBox.information(None, "Error", "No s'ha fet l'agregacio post")
            self.eliminaTaulesCalcul(Fitxer)

            return

#       *****************************************************************************************************************
#       JOIN + INTERSECCIO DE LA POBLACIO SUMA HABITANTS SOLAPATS
#       *****************************************************************************************************************
        try:
            create = "create table \"ZI_Total_Combi_" + Fitxer +"\" as select \"id_zi_combi\",sum(\"AgregacioSumaHabPostBucle_Temp\".\"Habitants_Solapats\") as \"Suma_Habitants_Solapats\", \"Habitants\" as HabitantsReals, \"the_geom\" from \"AgregacioSumaHabConjunt_Temp\" join \"AgregacioSumaHabPostBucle_Temp\"  on ST_Intersects(ST_buffer(\"AgregacioSumaHabPostBucle_Temp\".\"geom\",80,5), \"AgregacioSumaHabConjunt_Temp\".\"the_geom\") group by \"the_geom\",\"id_zi_combi\",\"Habitants\";"
            #print create
            cur.execute(create)
            conn.commit()
        except Exception as ex:
            print ("No s'ha fet l'agregacio COMBI")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            self.barraEstat_Error()
            QMessageBox.information(None, "Error", "No s'ha fet l'agregacio COMBI")
            self.eliminaTaulesCalcul(Fitxer)

            return

#       *****************************************************************************************************************
#       CREA TAULA ENTITAT BASE AMB ELS CAMPS HABITANTS SOLPATS,  HABITANTS REALS, I SUMA D'HABITANTS SOLAPATS
#       *****************************************************************************************************************
        try:
            drop="DROP TABLE IF EXISTS \"EntitatBase\";"
            cur.execute(drop)
            conn.commit()
            create = "CREATE TABLE \"EntitatBase\" as select \"ZI_Total_Combi_" + Fitxer +"\".\"Suma_Habitants_Solapats\",\"ZI_Total_Combi_" + Fitxer +"\".\"habitantsreals\", \"id\", \"geom\",\"radi\",\"NPlaces\", \"Cobertura\", \"AgregacioSumaHabPostBucle_Temp\".\"Habitants_Solapats\" from \"AgregacioSumaHabPostBucle_Temp\" join \"ZI_Total_Combi_" + Fitxer +"\"  on ST_Intersects(ST_buffer(\"AgregacioSumaHabPostBucle_Temp\".\"geom\",80,5), \"ZI_Total_Combi_" + Fitxer +"\".\"the_geom\") group by \"ZI_Total_Combi_" + Fitxer +"\".\"Suma_Habitants_Solapats\",\"ZI_Total_Combi_" + Fitxer +"\".\"habitantsreals\", \"id\", \"geom\",\"radi\",\"NPlaces\", \"Cobertura\", \"AgregacioSumaHabPostBucle_Temp\".\"Habitants_Solapats\";"
            #print create
            cur.execute(create)
            conn.commit()
        except Exception as ex:
            print ("No s'ha fet l'agregacio ENTITAT BASE")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            self.barraEstat_Error()
            QMessageBox.information(None, "Error", "No s'ha fet l'agregacio ENTITAT BASE")
            self.eliminaTaulesCalcul(Fitxer)

            return

#       *****************************************************************************************************************
#       TAULA FINAL SENSE BUFFER FINAL. CALCUL DEL RADI FINAL
#       *****************************************************************************************************************
        try:
            drop="DROP TABLE IF EXISTS \"EntitatBase_NRS_"+Fitxer+"\";\n"
            cur.execute(drop)
            conn.commit()
            create = "create table \"EntitatBase_NRS_"+Fitxer+"\" as select *,round(\"radi\"*sqrt(\"NPlaces\"/(\"Habitants_Solapats\"*(\"habitantsreals\"/\"Suma_Habitants_Solapats\")))) NRS from \"EntitatBase\";"
            cur.execute(create)
            conn.commit()
        except Exception as ex:
            print ("No s'ha fet l'agregacio ENTITAT BASE NRS")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            self.barraEstat_Error()
            QMessageBox.information(None, "Error", "No s'ha fet l'agregacio ENTITAT BASE NRS")
            self.eliminaTaulesCalcul(Fitxer)

            return
            
#       *****************************************************************************************************************
#       TAULA FINAL AMB BUFFER FINAL
#       *****************************************************************************************************************
        if self.dlg.CB_tramsUtils.isChecked():
            try:
                drop="DROP TABLE IF EXISTS \"AgregacioTotalBuffer_Temp\";"
                cur.execute(drop)
                conn.commit()
                sql_total="SELECT * FROM \"EntitatBase_NRS_"+Fitxer+"\""
                progress.setValue(80)
                pas_barra_iteracions=9
                QApplication.processEvents()
                if (self.dlg.chk_calc_local.isChecked()):
                    uri = QgsDataSourceUri()    
                    try:
                        uri.setConnection(host1,port1,nomBD1,usuari1,contra1)
                        print ("Connectat")
                        #print (uri.connectionInfo())
                    except Exception as ex:
                        print ("Error a la connexio")
                        template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                        message = template.format(type(ex).__name__, ex.args)
                        print (message)
                        self.barraEstat_Error()
                        QMessageBox.information(None, "Error", "Error a la connexio")
                        self.eliminaTaulesCalcul(Fitxer)
            
                        return
                        
                    selectNrs = "SELECT DISTINCT NRS FROM \"EntitatBase_NRS_"+Fitxer+"\""
                    cur.execute(selectNrs)
                    nrs = cur.fetchone()
                    sql_xarxa="SELECT * FROM \""+self.dlg.comboGraf.currentText()+"\""                  
                    buffer_resultat,graf_resultat=self.calcul_graf2(sql_total,sql_xarxa,uri,float(nrs[0]))#self.dlg.txt_radi.text()
                    vlayer=buffer_resultat
                    vlayer_graf=graf_resultat

                    #uri = "dbname='test' host=localhost port=5432 user='user' password='password' key=gid type=POINT table=\"public\".\"test\" (geom) sql="
                    # layer - QGIS vector layer
                    sql_1="drop table if exists \"buffer_final_"+Fitxer+"\";\n"
                    cur.execute(sql_1)
                    conn.commit()
                    
                    error = QgsVectorLayerExporter.exportLayer(vlayer, 'table="public"."buffer_final_'+Fitxer+'" (the_geom) '+uri.connectionInfo(), "postgres", vlayer.crs(), False)
                    if error[0] != 0:
                        iface.messageBar().pushMessage(u'Error', error[1])
                        
                    #error = QgsVectorLayerExporter.exportLayer(buffer_dissolved['OUTPUT'], 'table="public"."buffer_diss_'+Fitxer+'" (the_geom) '+uri.connectionInfo(), "postgres", vlayer.crs(), False)
                    #if error[0] != 0:
                    #    iface.messageBar().pushMessage(u'Error', error[1])
                        
                    taula_buffer="buffer_final_"+Fitxer
                    create = "create local temp table \"AgregacioTotalBuffer_Temp\" AS select \"EntitatBase_NRS_"+Fitxer+"\".*, \"the_geom\" from \"" + taula_buffer + "\" join \"EntitatBase_NRS_"+Fitxer+"\" on (\"" + taula_buffer + "\".\"id\" = \"EntitatBase_NRS_"+Fitxer+"\".\"id\");"  
                        
                else:
                    taula_buffer=self.calcul_graf(sql_total,"nrs")
                    create = "create local temp table \"AgregacioTotalBuffer_Temp\" AS select \"EntitatBase_NRS_"+Fitxer+"\".*, \"the_geom\" from \"" + taula_buffer + "\" join \"EntitatBase_NRS_"+Fitxer+"\" on (\"" + taula_buffer + "\".\"punt_id\" = \"EntitatBase_NRS_"+Fitxer+"\".\"id\");"
                    #print create
                cur.execute(create)
                conn.commit()
            except Exception as ex:
                print ("Agregacio nou radi no feta")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                self.barraEstat_Error()
                QMessageBox.information(None, "Error", "Agregacio nou radi no feta")
                self.eliminaTaulesCalcul(Fitxer)
    
                return
        
        
        else: 
            try:
                drop="DROP TABLE IF EXISTS \"AgregacioTotalBuffer_Temp\";\n"
                cur.execute(drop)
                conn.commit()
                create = "create local temp table \"AgregacioTotalBuffer_Temp\" AS select *, ST_buffer(\"geom\",\"nrs\",100) the_geom from \"EntitatBase_NRS_"+Fitxer+"\";"
                #print create
                cur.execute(create)
                conn.commit()
            except Exception as ex:
                print ("Agregacio nou radi no feta")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                self.barraEstat_Error()
                QMessageBox.information(None, "Error", "Agregacio nou radi no feta")
                self.eliminaTaulesCalcul(Fitxer)
    
                return
                
                
        
#       *****************************************************************************************************************
#       TAULA FINAL AMB CALCUL D'HABITANTS A LA ZONA D'INFLUENCIA
#       *****************************************************************************************************************
        try:
            drop="DROP TABLE IF EXISTS \"AgregacioTotal_Temp\";\n"
            cur.execute(drop)
            conn.commit()
            #create = "create local temp table \"AgregacioTotal_Temp\" AS select \"Suma_Habitants_Solapats\",\"habitantsreals\", \"AgregacioTotalBuffer_Temp\".\"id\" ,\"AgregacioTotalBuffer_Temp\".\"geom\", \"radi\", \"NPlaces\", \"Cobertura\", \"Habitants_Solapats\", \"nrs\",\"the_geom\", sum(\"Habitants\") as \"Habitants\" from \"AgregacioTotalBuffer_Temp\" join "+ taula + " on ST_Intersects("+ taula + ".\"geom\", \"AgregacioTotalBuffer_Temp\".\"the_geom\") group by \"Suma_Habitants_Solapats\",\"habitantsreals\", \"AgregacioTotalBuffer_Temp\".\"id\" ,\"AgregacioTotalBuffer_Temp\".\"geom\", \"radi\", \"NPlaces\", \"Cobertura\", \"Habitants_Solapats\", \"nrs\",\"the_geom\";"
            create = "create table \"AgregacioTotal_Temp\" AS select \"Suma_Habitants_Solapats\",\"habitantsreals\", \"AgregacioTotalBuffer_Temp\".\"id\" ,\"AgregacioTotalBuffer_Temp\".\"geom\", \"radi\", \"NPlaces\", \"Cobertura\", \"Habitants_Solapats\", \"nrs\",\"the_geom\", sum(\"Habitants\") as \"Habitants\" from \"AgregacioTotalBuffer_Temp\" join "+ taula + " on ST_Intersects("+ taula + ".\"geom\", \"AgregacioTotalBuffer_Temp\".\"the_geom\") group by \"Suma_Habitants_Solapats\",\"habitantsreals\", \"AgregacioTotalBuffer_Temp\".\"id\" ,\"AgregacioTotalBuffer_Temp\".\"geom\", \"radi\", \"NPlaces\", \"Cobertura\", \"Habitants_Solapats\", \"nrs\",\"the_geom\";"
            #print create
            cur.execute(create)
            conn.commit()  
        except Exception as ex:
            print ("no s'ha creat l'agregacio")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            self.barraEstat_Error()
            QMessageBox.information(None, "Error", "no s'ha creat l'agregacio")
            self.eliminaTaulesCalcul(Fitxer)

            return
            
            
        '''
        drop = "DROP TABLE IF EXISTS \"TAULA_FINAL_" + Fitxer +"\";"
        cur.execute(drop)
        conn.commit()
        '''
        nomTaula = "\"EntitatPuntual_Temp_"+Fitxer+"\""
        create = "create table \"TAULA_FINAL_" + Fitxer +"\" AS select " + nomTaula +".*,\"Suma_Habitants_Solapats\",\"habitantsreals\", \"radi\", \"Habitants_Solapats\", \"nrs\",\"the_geom\", \"Habitants\" FROM \"AgregacioTotal_Temp\" join " + nomTaula +" on (" + nomTaula +".\"id\" = \"AgregacioTotal_Temp\".\"id\") order by " + nomTaula +".\"id\";\n"
        create += "ALTER TABLE \"TAULA_FINAL_" + Fitxer +"\" DROP COLUMN IF EXISTS \"ID\";\n"
        create += "ALTER TABLE \"TAULA_FINAL_" + Fitxer +"\" DROP COLUMN IF EXISTS \"geom\";"
        try:
            #print (create)
            cur.execute(create)
            conn.commit()
        except Exception as ex:
            print ("Error al crear la TAULA_FINAL")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            self.barraEstat_Error()
            QMessageBox.information(None, "Error", "Error al crear la TAULA_FINAL")
            self.eliminaTaulesCalcul(Fitxer)

            return
            
        uri = QgsDataSourceUri()
        try:
            uri.setConnection(host1,port1,nomBD1,usuari1,contra1)
            print ("Connectat")
        except Exception as ex:
            print ("Error a la connexio")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            self.barraEstat_Error()
            QMessageBox.information(None, "Error", "Error a la connexio")
            self.eliminaTaulesCalcul(Fitxer)

            return
            
#       
        sql_total = "select * from \"TAULA_FINAL_" + Fitxer +"\""
        QApplication.processEvents()
        uri.setDataSource("","("+sql_total+")","the_geom","","id")
        QApplication.processEvents()

        titol=self.dlg.combo_punts.currentText()
        titol2='Cobertura de '
        titol3=titol2.encode('utf8','strict')+titol.encode('utf8','strict')
        vlayer = QgsVectorLayer(uri.uri(False), titol3.decode('utf8'), "postgres")
        QApplication.processEvents()
        if vlayer.isValid():
            Cobertura=datetime.datetime.now().strftime("%Y%m%d%H%M%S%f")
            """Es crea un Shape a la carpeta temporal amb la data i hora actual"""
            error=QgsVectorFileWriter.writeAsVectorFormat(vlayer, os.environ['TMP']+"/Cobertura_"+Cobertura+".shp", "utf-8", vlayer.crs(), "ESRI Shapefile")
            """Es carrega el Shape a l'entorn del QGIS"""
            vlayer = QgsVectorLayer(os.environ['TMP']+"/Cobertura_"+Cobertura+".shp", titol3.decode('utf8'), "ogr")
            vlayer.setProviderEncoding(u'UTF-8')
            vlayer.dataProvider().setEncoding(u'UTF-8')
            #vlayer.setOpacity(0.5)
            symbols = vlayer.renderer().symbols(QgsRenderContext())
            symbol=symbols[0]
            symbol.setColor(self.dlg.colorArea.palette().color(1))
            symbol.setOpacity(0.5)
            QgsProject.instance().addMapLayer(vlayer,False)
            root = QgsProject.instance().layerTreeRoot()
            myLayerNode=QgsLayerTreeLayer(vlayer)
            root.insertChildNode(0,myLayerNode)
            #root.insertLayer(0,vlayer)
            myLayerNode.setCustomProperty("showFeatureCount", True)
            QApplication.processEvents()
            iface.mapCanvas().refresh()
            #qgis.utils.iface.legendInterface().refreshLayerSymbology(vlayer)
        else:
            QMessageBox.information(None, "LAYER ERROR 1:", "%s\n\nThe layer %s is not valid" % ("error","nom_layer"))

        QApplication.processEvents()
#       *****************************************************************************************************************
#       INICI CALCUL DE HABITANTS NO COBERTS  
#       *****************************************************************************************************************
        """ Calcul dels habitants afectats"""
        sql = "SELECT SUM(\"habitantsreals\") as Habitants from \"ZI_Total_Combi_" + Fitxer +"\";"
        Habitants_afectats = 0
        try:
            cur.execute(sql)
            Habitants_afectats = cur.fetchone()
        except Exception as ex:
            print ("Error llegint el nombre d'habitants afectats")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            self.barraEstat_Error()
            QMessageBox.information(None, "Error", "Error llegint el nombre d'habitants afectats")
            self.eliminaTaulesCalcul(Fitxer)

            return
            
        """Calcul dels habitants totals"""
        if (self.dlg.bt_ILLES.isChecked()):
            sql = "SELECT SUM(\"Habitants\") from \"Illes_Resum\";"
        elif(self.dlg.bt_Parcel.isChecked()):
            sql = "SELECT SUM(\"Habitants\") from \"Parcel_Resum\";"
        else:
            sql = "SELECT SUM(\"Habitants\") from \"NPolicia_Resum\";"
        Habitants_totals = 0
        try:
            cur.execute(sql)
            Habitants_totals = cur.fetchone()
            self.dlg.lblNum.setText(str(Habitants_totals[0]-Habitants_afectats[0]))
            print ("HABITANTS AFECTATS: "+str(Habitants_afectats[0]))
            print ("HABITANTS TOTALS: "+str(Habitants_totals[0]))
        except Exception as ex:
            print ("Error llegint el nombre d'habitants totals")
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            self.barraEstat_Error()
            QMessageBox.information(None, "Error", "Error llegint el nombre d'habitants totals")
            self.eliminaTaulesCalcul(Fitxer)

            return
            
        
#       *****************************************************************************************************************
#       FINAL CALCUL DE HABITANTS NO COBERTS  
#       *****************************************************************************************************************
        
#       *****************************************************************************************************************
#       INICI CARREGA DEL TEMATIC DE POBLACIO NO AFECTADA  
#       *****************************************************************************************************************
        if (self.dlg.CB_mostrarPobNoAfectada.isChecked()):
            """CreaciÃ³ del tematic de poblaciÃ³ no afectada"""
            uri = QgsDataSourceUri()
            try:
                uri.setConnection(host1,port1,nomBD1,usuari1,contra1)
                print ("Connectat")
            except Exception as ex:
                print ("Error a la connexio")
                template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                message = template.format(type(ex).__name__, ex.args)
                print (message)
                self.barraEstat_Error()
                QMessageBox.information(None, "Error", "Error a la connexio")
                self.eliminaTaulesCalcul(Fitxer)
    
                return
                
            sql = "select * from \"JoinIlles_Habitants_Temp_"+ Fitxer + "\" where \"JoinIlles_Habitants_Temp_"+ Fitxer + "\".\"id\" not in (select \"JoinIlles_Habitants_Temp_"+ Fitxer + "\".\"id\" from \"JoinIlles_Habitants_Temp_"+ Fitxer + "\" join \"TAULA_FINAL_" + Fitxer +"\" on ST_Intersects(\"JoinIlles_Habitants_Temp_"+ Fitxer + "\".\"geom\",\"TAULA_FINAL_" + Fitxer +"\".\"the_geom\"))"
            #print sql
            uri.setDataSource("","(" + sql+ ")","geom","","id")
            
            titol2='Temátic de població no afectada: '
            titol3=titol2.encode('utf8','strict')
            vlayer = QgsVectorLayer(uri.uri(), titol3.decode('utf8'), "postgres")
            if vlayer.isValid():
                Tematic=datetime.datetime.now().strftime("%Y%m%d%H%M%S%f")
                """Es crea un Shape a la carpeta temporal amb la data i hora actual"""
                error=QgsVectorFileWriter.writeAsVectorFormat(vlayer, os.environ['TMP']+"/Tematic_"+Tematic+".shp", "utf-8", vlayer.crs(), "ESRI Shapefile")
                """Es carrega el Shape a l'entorn del QGIS"""
                vlayer = QgsVectorLayer(os.environ['TMP']+"/Tematic_"+Tematic+".shp", titol3.decode('utf8'), "ogr")
                vlayer.setProviderEncoding(u'UTF-8')
                vlayer.dataProvider().setEncoding(u'UTF-8')
                fieldname="Habitants"
                numberOfClasses=5
                myRangeList=[]
                mysymbol=QgsFillSymbol()
                colorRamp=QgsGradientColorRamp( QColor( 230, 230, 230 ), QColor( 60, 60, 60 ))
                
                format = QgsRendererRangeLabelFormat()
                template = "%1 a %2 habitants"
                precision = 0
                format.setFormat(template)
                format.setPrecision(precision)
                format.setTrimTrailingZeroes(True)
                renderer=QgsGraduatedSymbolRenderer.createRenderer(vlayer,fieldname,numberOfClasses,QgsGraduatedSymbolRenderer.Quantile,mysymbol,colorRamp)
                renderer.setLabelFormat(format,True)
                vlayer.setRenderer(renderer)
                
                QgsProject.instance().addMapLayer(vlayer,False)
                root = QgsProject.instance().layerTreeRoot()
                myLayerNode=QgsLayerTreeLayer(vlayer)
                root.insertChildNode(0,myLayerNode)
                myLayerNode.setCustomProperty("showFeatureCount", True)
                QApplication.processEvents()
                iface.mapCanvas().refresh()
                #qgis.utils.iface.legendInterface().refreshLayerSymbology(vlayer)
            else:
                QMessageBox.information(None, "LAYER ERROR 2:", "%s\n\nThe layer %s is not valid" % ("error","nom_layer"))
        QApplication.processEvents()
#       *****************************************************************************************************************
#       FI CARREGA DEL TEMATIC DE POBLACIO NO AFECTADA  
#       ***************************************************************************************************************** 
#       *****************************************************************************************************************
#       INICI CARREGA DEL GRAF  
#       *****************************************************************************************************************
        if (self.dlg.CB_dibuixarGraf.isChecked()):
            """ CreaciÃ³ del tematic del graf"""
            uri.setDataSource("","(SELECT * FROM \"graf_utilitzat_"+Fitxer+"\")","the_geom","","punt_id")
            titol=self.dlg.combo_punts.currentText()
            titol2='Graf: '
            titol3=titol2.encode('utf8','strict')+titol.encode('utf8','strict')
            
            if (self.dlg.chk_calc_local.isChecked()):
                vlayer=vlayer_graf
            else:
                vlayer = QgsVectorLayer(uri.uri(), titol3.decode('utf8'), "postgres")
            if vlayer.isValid():
                Graf=datetime.datetime.now().strftime("%Y%m%d%H%M%S%f")
                """Es crea un Shape a la carpeta temporal amb la data i hora actual"""
                error=QgsVectorFileWriter.writeAsVectorFormat(vlayer, os.environ['TMP']+"/Graf_"+Graf+".shp", "utf-8", vlayer.crs(), "ESRI Shapefile")
                """Es carrega el Shape a l'entorn del QGIS"""
                vlayer = QgsVectorLayer(os.environ['TMP']+"/Graf_"+Graf+".shp", titol3.decode('utf8'), "ogr")
                vlayer.setProviderEncoding(u'UTF-8')
                vlayer.dataProvider().setEncoding(u'UTF-8')
                cur.execute("DROP TABLE IF EXISTS \"Graf_utilitzat_"+Fitxer+"\";")
                conn.commit()

                symbols = vlayer.renderer().symbols(QgsRenderContext())
                symbol=symbols[0]
                symbol.setColor(self.dlg.color.palette().color(1))
                if (self.dlg.comboTras.currentText()=='Estret'):
                    symbol.setWidth(0.5)
                elif (self.dlg.comboTras.currentText()=='Mitjà'):
                    symbol.setWidth(1.0)
                elif (self.dlg.comboTras.currentText()=='Ample'):
                    symbol.setWidth(1.5)
                QgsProject.instance().addMapLayer(vlayer,False)
                root = QgsProject.instance().layerTreeRoot()
                myLayerNode=QgsLayerTreeLayer(vlayer)
                root.insertChildNode(0,myLayerNode)
                myLayerNode.setCustomProperty("showFeatureCount", True)
                QApplication.processEvents()
                iface.mapCanvas().refresh()
                #qgis.utils.iface.legendInterface().refreshLayerSymbology(vlayer)
            else:
                QMessageBox.information(None, "LAYER ERROR 3:", "%s\n\nThe layer %s is not valid" % ("error","nom_layer"))
                
            
            QApplication.processEvents()
#       *****************************************************************************************************************
#       FI CARREGA DEL GRAF  
#       *****************************************************************************************************************

#       *****************************************************************************************************************
#       AFEGIM LA TAULA DE PUNTS DE ZONES D'INFLUENCIA
#       *****************************************************************************************************************
        titol=self.dlg.combo_punts.currentText()
        sql_total = "select * from \""+ titol +"\""
        #print sql_total
        QApplication.processEvents()
        uri.setDataSource("","("+sql_total+")","geom","","id")
        QApplication.processEvents()

        titol2='Entitat: '
        titol3=titol2.encode('utf8','strict')+titol.encode('utf8','strict')
        vlayer = QgsVectorLayer(uri.uri(False), titol3.decode('utf8'), "postgres")
        QApplication.processEvents()
        if vlayer.isValid():
            Cobertura=datetime.datetime.now().strftime("%Y%m%d%H%M%S%f")
            """Es crea un Shape a la carpeta temporal amb la data i hora actual"""
            error=QgsVectorFileWriter.writeAsVectorFormat(vlayer, os.environ['TMP']+"/EntitatPuntual_"+Cobertura+".shp", "utf-8", vlayer.crs(), "ESRI Shapefile")
            """Es carrega el Shape a l'entorn del QGIS"""
            vlayer = QgsVectorLayer(os.environ['TMP']+"/EntitatPuntual_"+Cobertura+".shp", titol3.decode('utf8'), "ogr")
            vlayer.setProviderEncoding(u'UTF-8')
            vlayer.dataProvider().setEncoding(u'UTF-8')
            symbols = vlayer.renderer().symbols(QgsRenderContext())
            symbol=symbols[0]
            symbol.setColor(self.dlg.color.palette().color(1))
            QgsProject.instance().addMapLayer(vlayer,False)
            root = QgsProject.instance().layerTreeRoot()
            myLayerNode=QgsLayerTreeLayer(vlayer)
            root.insertChildNode(0,myLayerNode)
            #root.insertLayer(0,vlayer)
            myLayerNode.setCustomProperty("showFeatureCount", True)
            QApplication.processEvents()
            iface.mapCanvas().refresh()
            #qgis.utils.iface.legendInterface().refreshLayerSymbology(vlayer)
        else:
            QMessageBox.information(None, "LAYER ERROR 0:", "%s\n\nThe layer %s is not valid" % ("error","nom_layer"))

        QApplication.processEvents()
        
#       *****************************************************************************************************************
#       AFEGIM LA TAULA FINAL DE ZONES D'INFLUENCIA A LA LLEGENDA
#       *****************************************************************************************************************      
        print ("Durada: "+str(int(time.time()-a))+" s.")
        progress.setValue(100)
        self.barraEstat_connectat()
        
        self.eliminaTaulesCalcul(Fitxer)
        
        self.bar.setEnabled(True)
        self.bar.clearWidgets()
        QApplication.processEvents()
        print ("Final")
    
    
    
    def eliminaTaulesCalcul(self,Fitxer):
        '''
        Aquesta funció s'encarrega d'eliminar les taules utilitzades durant el càlcul
        '''     
        drop = "DROP TABLE IF EXISTS \"TAULA_FINAL_" + Fitxer +"\";\n"
        drop += "DROP TABLE IF EXISTS \"ZI_Total_Combi_" + Fitxer +"\";\n"
        drop += "DROP TABLE IF EXISTS \"graf_utilitzat_"+Fitxer+"\";\n"
        drop += "DROP TABLE IF EXISTS \"JoinIlles_Habitants_Temp_"+ Fitxer + "\";\n"
        drop += "DROP TABLE IF EXISTS \"EntitatBase\";\n"
        drop += "DROP TABLE IF EXISTS \"EntitatBase_NRS_"+Fitxer+"\";\n"
        drop +="DROP TABLE IF EXISTS  \"buffer_final_"+Fitxer+"\";\n"
        drop += "DROP TABLE IF EXISTS \"JoinIlles_Habitants_Temp_"+ Fitxer + "\";\n"
        drop += "DROP TABLE IF EXISTS \"AgregacioSumaHab_Temp_"+ Fitxer + "\";\n"
        drop += "DROP TABLE IF EXISTS \"AgrupacioRadiFix_Temp\";\n"
        drop += "DROP TABLE IF EXISTS \"EntitatBase_NRS_"+Fitxer+"\";\n"
        drop += "DROP TABLE IF EXISTS \"EntitatPuntual_Temp_"+Fitxer+"\";\n"
        self.bar.setEnabled(True)
        self.bar.clearWidgets()
        
        try:
            cur.execute(drop)
            conn.commit()
        except:
            print ("Error DROP final")
    
    def on_click_Esborra_temporals(self):
        global clicked_esborra
        clicked_esborra=clicked_esborra+1
        if clicked_esborra==5:
            messagebox=QMessageBox(QMessageBox.Question, "S'esborraran totes les taules TEMPORALS de la connexió escollida.", "N'està segur?\nPot provocar errors de funcionament en plugins que s'estiguin executant en aquest mateix moment...")
            messagebox.addButton(QMessageBox.Yes)
            messagebox.addButton(QMessageBox.No)
            messagebox.setDefaultButton(QMessageBox.No)
            reply=messagebox.exec()
            if reply!=QMessageBox.Yes:
                return
            else:
                self.DropTemporalTables()
                QMessageBox.information(None, "Missatge d'Informació", "Taules TEMPORALS esborrades correctament.")                
            clicked_esborra=0
            
    def DropTemporalTables(self):
        '''
        Aquesta funció s'encarrega d'eliminar les taules temporals no esborrades
        '''     
        self.DropTempTable("TAULA_FINAL_")
        self.DropTempTable("ZI_Total_Combi_")
        self.DropTempTable("graf_utilitzat_")
        self.DropTempTable("JoinIlles_Habitants_Temp_")
        self.DropTempTable("EntitatBase")
        self.DropTempTable("EntitatBase_NRS_")
        self.DropTempTable("buffer_final_")
        self.DropTempTable("JoinIlles_Habitants_Temp_")
        self.DropTempTable("AgregacioSumaHab_Temp_")
        self.DropTempTable("AgrupacioRadiFix_Temp")
        self.DropTempTable("EntitatBase_NRS_")
        self.DropTempTable("EntitatPuntual_Temp_")
        self.DropTempTable("necessarypoints")
        self.DropTempTable("LayerExportat")
        self.DropTempTable("Resum_Temp_")

    def DropTempTable(self,taula):
        '''
        Aquesta funció s'encarrega de construir els sqls necessaris per eliminar les taules temporals no esborrades
        '''     
        SQLDrop="SELECT CONCAT('DROP TABLE IF EXISTS \"', TABLE_SCHEMA, '\".""\"', TABLE_NAME, '\""";') FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME LIKE '"+taula+"%' AND TABLE_SCHEMA = 'public';"
        try:
            cur.execute(SQLDrop)
            llista = cur.fetchall()
            for elem in llista:
                try:
                    cur.execute(elem[0])
                except Exception as ex:            
                    msg_error="Error en la sentencia SQL següent:\n"+elem[0]
                    print(msg_error)
                    template = "An exception of type {0} occurred. Arguments:\n{1!r}"
                    message = template.format(type(ex).__name__, ex.args)
                    print (message)
                    QMessageBox.information(None, "Error", msg_error)
            conn.commit()
        except Exception as ex:
            msg_error="Error en la sentencia SQL següent:\n"+SQLDrop
            print(msg_error)
            template = "An exception of type {0} occurred. Arguments:\n{1!r}"
            message = template.format(type(ex).__name__, ex.args)
            print (message)
            QMessageBox.information(None, "Error", msg_error)    
                             
    def barraEstat_llegint(self):
        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: rgb(255, 170, 142)')
        self.dlg.lblEstatConn.setText("Llegint...")
        
    def barraEstat_processant(self):
        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: rgb(255, 125, 155)')
        self.dlg.lblEstatConn.setText("Processant...")
        
    def barraEstat_noConnectat(self):
        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #FFFFFF')
        self.dlg.lblEstatConn.setText('No connectat')
    
    def barraEstat_Error(self):
        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #FF0000')
        self.dlg.lblEstatConn.setText('Error')
        
    def barraEstat_connectat(self):
        self.dlg.lblEstatConn.setStyleSheet('border:1px solid #000000; background-color: #7fff7f')
        self.dlg.lblEstatConn.setText('Connectat')

    def run(self):
        """Run method that performs all the real work"""
        self.EstatInicial()
        self.dlg.show()
        conn=self.getConnections()
        # Run the dialog event loop
        # Run the dialog event loop
        self.populateComboBox(self.dlg.comboConnexio ,conn,'Selecciona connexió',True)
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    """
    PART DE STREET VIEW
    """
    def on_click_StreeView(self):
        tool = PointTool(self.iface.mapCanvas())
        self.iface.mapCanvas().setMapTool(tool)

class PointTool(QgsMapTool):  

        
        def __init__(self, canvas):
        
            QgsMapTool.__init__(self, canvas)
            self.canvas = canvas    

        def canvasPressEvent(self, event):
            #self.stdCursor=QgsMapTool.mcursor()
            self.setCursor(QCursor(Qt.CrossCursor))
            x = event.pos().x()
            y = event.pos().y()
            global rb ,premuto ,point0, stdCursor
            if not premuto: 
              premuto=True
              rb=QgsRubberBand(iface.mapCanvas(),QgsWkbTypes.PointGeometry )
              rb.setColor ( QtCore.Qt.red )
              point0 = self.canvas.getCoordinateTransform().toMapCoordinates(x, y)
              rb.addPoint(point0)  
  
        def canvasMoveEvent(self, event):
              x = event.pos().x()
              y = event.pos().y()        
              global premuto,point0,point1,linea,rl
              if premuto:
               if not linea:              
                rl.setColor ( QtCore.Qt.red )
                point1 = self.canvas.getCoordinateTransform().toMapCoordinates(x, y)
                rl.addPoint(point0)  
                rl.addPoint(point1)
                linea=True
               else:
                if linea: 
                  point1 = self.canvas.getCoordinateTransform().toMapCoordinates(x, y)
                  rl.reset(QgsWkbTypes.LineGeometry)
                  rl.addPoint(point0)  
                  rl.addPoint(point1)
                  
                  
      
        def canvasReleaseEvent(self, event):
            global premuto,linea,rb,rl,point1,point0
            angle = math.atan2(point1.x() - point0.x(), point1.y() - point0.y())
            angle = math.degrees(angle)if angle>0 else (math.degrees(angle) + 180)+180
            premuto=False
            linea=False
            actual_crs = self.canvas.mapSettings().destinationCrs()
            crsDest = QgsCoordinateReferenceSystem(4326)  # WGS 84 / UTM zone 33N
            xform = QgsCoordinateTransform(actual_crs, crsDest,QgsProject.instance())
            pt1 = xform.transform(point0)
           
            webbrowser.open_new('https://www.google.com/maps/@?api=1&map_action=pano&pano=tu510ie_z4ptBZYo2BGEJg&viewpoint='+str(pt1.y())+','+str(pt1.x())+'&heading='+str(int(angle)) +'&pitch=10&fov=250')
            rl.reset()
            rb.reset()
            #self.setCursor(self.stdCursor)           
            self.canvas.unsetMapTool(self)           
        def activate(self):
            pass
    
        def deactivate(self):
            pass
           
        def isZoomTool(self):
            return False
    
        def isTransient(self):
            return False
    
        def isEditTool(self):
            return True    
"""
PART DE STREET VIEW
"""        